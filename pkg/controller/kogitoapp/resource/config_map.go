// Copyright 2019 Red Hat, Inc. and/or its affiliates
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package resource

import (
	"crypto/md5"
	"fmt"
	"github.com/kiegroup/kogito-cloud-operator/pkg/apis/app/v1alpha1"
	"github.com/kiegroup/kogito-cloud-operator/pkg/infrastructure"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"strings"
)

const (
	// protobufConfigMapSuffix Suffix that is appended to Protobuf ConfigMap name
	protobufConfigMapSuffix = "protobuf-files"
	// protobufConfigMapAnnotationPrefix Prefix for hash annotations on Protobuf ConfigMaps
	protobufConfigMapAnnotationPrefix = "org.kie.kogito.protobuf.hash"
)

// newProtoBufConfigMap creates the configMap that will hold protobuf files generated by the persistence mechanism
// see more: https://github.com/kiegroup/kogito-runtimes/wiki/Persistence
func newProtoBufConfigMap(kogitoApp *v1alpha1.KogitoApp) *v1.ConfigMap {
	configMap := &v1.ConfigMap{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: kogitoApp.Namespace,
			Name:      GenerateProtoBufConfigMapName(kogitoApp),
			Labels:    map[string]string{infrastructure.ConfigMapProtoBufEnabledLabelKey: "true"},
		},
	}
	addDefaultMeta(&configMap.ObjectMeta, kogitoApp)
	return configMap
}

// GenerateProtoBufConfigMapName generates the name of the protobuf configMap based the given KogitoApp instance
func GenerateProtoBufConfigMapName(kogitoApp *v1alpha1.KogitoApp) string {
	return fmt.Sprintf("%s-%s", kogitoApp.Name, protobufConfigMapSuffix)
}

// CheckProtoBufConfigMapIntegrity verifies if data content in configMap matches md5 annotations
func CheckProtoBufConfigMapIntegrity(configMap *v1.ConfigMap) bool {
	// it's a protobuf configmap, let's check it's integrity
	if strings.HasSuffix(configMap.Name, protobufConfigMapSuffix) {
		annotations := map[string]string{}
		for aKey, aValue := range configMap.Annotations {
			if strings.HasPrefix(aKey, protobufConfigMapAnnotationPrefix) {
				annotations[aKey] = aValue
			}
		}
		if len(annotations) != len(configMap.Data) {
			return false
		}

		// checks if the md5 in each file of the config map matches
		md5match := false
		for fileName, contents := range configMap.Data {
			fileMD5 := fmt.Sprintf("%x", md5.Sum([]byte(contents)))
			for aKey, aValue := range annotations {
				if strings.HasSuffix(fmt.Sprintf("%s.proto", aKey), fileName) && fileMD5 == aValue {
					md5match = true
					break
				}
			}
			if !md5match {
				return false
			}
		}
	}

	return true
}
