// Copyright 2021 Red Hat, Inc. and/or its affiliates
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kiegroup/kogito-operator/api/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KogitoInfraLister helps list KogitoInfras.
// All objects returned here must be treated as read-only.
type KogitoInfraLister interface {
	// List lists all KogitoInfras in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.KogitoInfra, err error)
	// KogitoInfras returns an object that can list and get KogitoInfras.
	KogitoInfras(namespace string) KogitoInfraNamespaceLister
	KogitoInfraListerExpansion
}

// kogitoInfraLister implements the KogitoInfraLister interface.
type kogitoInfraLister struct {
	indexer cache.Indexer
}

// NewKogitoInfraLister returns a new KogitoInfraLister.
func NewKogitoInfraLister(indexer cache.Indexer) KogitoInfraLister {
	return &kogitoInfraLister{indexer: indexer}
}

// List lists all KogitoInfras in the indexer.
func (s *kogitoInfraLister) List(selector labels.Selector) (ret []*v1beta1.KogitoInfra, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KogitoInfra))
	})
	return ret, err
}

// KogitoInfras returns an object that can list and get KogitoInfras.
func (s *kogitoInfraLister) KogitoInfras(namespace string) KogitoInfraNamespaceLister {
	return kogitoInfraNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KogitoInfraNamespaceLister helps list and get KogitoInfras.
// All objects returned here must be treated as read-only.
type KogitoInfraNamespaceLister interface {
	// List lists all KogitoInfras in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.KogitoInfra, err error)
	// Get retrieves the KogitoInfra from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.KogitoInfra, error)
	KogitoInfraNamespaceListerExpansion
}

// kogitoInfraNamespaceLister implements the KogitoInfraNamespaceLister
// interface.
type kogitoInfraNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KogitoInfras in the indexer for a given namespace.
func (s kogitoInfraNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.KogitoInfra, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.KogitoInfra))
	})
	return ret, err
}

// Get retrieves the KogitoInfra from the indexer for a given namespace and name.
func (s kogitoInfraNamespaceLister) Get(name string) (*v1beta1.KogitoInfra, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("kogitoinfra"), name)
	}
	return obj.(*v1beta1.KogitoInfra), nil
}
