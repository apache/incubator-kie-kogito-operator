// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

package shared

import (
	"github.com/stretchr/testify/assert"
	"io/ioutil"
	"testing"
)

// kubeConfigForKIND represents a default kubeconfig file generated by KIND on installation.
// There's a context but no namespace
const kubeConfigForKIND = `
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN5RENDQWJDZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJd01Ea3dPREU0TXpneE0xb1hEVE13TURrd05qRTRNemd4TTFvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTmk1CktOMmZyeHl4ZldzblBZZ3pvL01jbzltVDQvcTFIa1RmNndwc2QzRHdXcHZNam9uUTdFOXVBWE9reTErUk1rbXUKVmJTTHJYVjJQN0FOdmdYMVkwS3duQzdTQzBJNlIyN05xRTk3L1VORXN1Rm9Ub3RMWXA2eXBhRWRaWWNranpzZwpZeGhGcEp4VkRFdFZpOVlhbzRzdWd1cHdjKzRnVU9tRm1YcGVod3pvczhOekFjdm9ZMjFPeDRJNnR3aG1LNzV2CnRQb3RDMk1pRXl6L1BqclJsajRjWWcvWmxsTytUL1BUOTRQUVFJU1lhSENmb1BUakxZUjFDKytMbkxnektrTisKalhEN1pTeDltMlBVK2pGZ3pSbGdrQ2YzM1VZZFhha095MUxsUzhKWmJIOGJ5Y2tVSDJSZzhtZ05oUGpDSGRYTgpjLzFZclBmWHNhbFI2My9oenRNQ0F3RUFBYU1qTUNFd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLQU5HZzM1UXR4NVBTUEdFY2ZFMzk1M1NjOUgKTVhLb1lSMUNva3ZFbldMdldmWU5pK1N5TTF1UVp3KzBJc0tFdXA0RmRkaUJCQ3JwbGRYSi9mZWRMci9PVm14VwpueUxEcHROT3dGMUxXZHgwUExrMENGR3BQK01FUHo1czN2N2hRU2hVTERyYUVuR2ZJZ1Z0QmttWTlDaDZ6dXBGClJDajh1K1hJVW1JWDZVRldOd3dVdXpjN1hPNmM5NktoYVVXN0FaTGJ1WkpwUndJWlFyU1pKdGlWaExEdnZnc2gKTXI0dWZsRjJBZGxwVFBZU1NsOFJubTlBUmJFOFVNdFQ0RjhnZDNWZGF5b0hBbzBuMmhna0REUmZ5MnB6Y1BiOApQbER4cEhBbkx1c05HVzBBZ1JXM3FLQmdaMUlQL0VDTGVERWtsSVNlRTVKTDBGSTB4U1ZoQ1dzOVcxYz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    server: https://127.0.0.1:35351
  name: kind-bdd-tests
contexts:
- context:
    cluster: kind-bdd-tests
    user: kind-bdd-tests
  name: kind-bdd-tests
current-context: kind-bdd-tests
kind: Config
preferences: {}
users:
- name: kind-bdd-tests
  user:
    client-certificate-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM4akNDQWRxZ0F3SUJBZ0lJRFFhVW42YUJ0Wmt3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TURBNU1EZ3hPRE00TVROYUZ3MHlNVEE1TURneE9ETTRNVFphTURReApGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1Sa3dGd1lEVlFRREV4QnJkV0psY201bGRHVnpMV0ZrCmJXbHVNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQW4zck40dTkwalEzNVE3eksKZUQwYnRpVVdGcUdFVVpvbFB0Um5JbzBCV1p6ZmtDaER4S2RIM3hBT2huNWZMU3orL3Y2LzRObnVYeGMrdTNVSgpSNDB5MVpzWFkzWXBPRjdkMkQrTjlhdlFLNk9uQnlnUXAwOU9QY251UEx1NjJBSkM2aHN0dVRhOQpuYTRIVmhuTnd5eFNrWDQ1ckxKRStBU0lVZmh3ZVltYWtxSm43OTlVTmFDR0IwbWNaUXNPTTRkY2ZoUjZqdTRWCkV5V0ZCelVYVHB5cmFXcnFSM3o5TFdwVUthMmN4cWtNMjlMVUV6WktQSVpyeWJSS09OZz0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
    #client-key-data: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbjNyTjR1OTBqUTM1UTd6S2VEMGJ0aVVXRnFHRVVab2xQdFJuSW8wQldaemZrQ2hECnhLZEgzeEFPaG41ZkxTeisvdjYvNE5udVh4Yyt1M1VKUjQweTFac1hoSzk1VlUzYmlKT1diSFI5b2F2OUJiRVkKaCtIZ0xvcWJnTGxJTnl3cWhiSTN5VENSaXdoNlZReFRrZWtwaU1wbC9JekpYOU8rc1RYNHVxbndQY1ZjTDlYSwp4cFg2QlBnV1JXRjNuWWlpN3MvN1lpUWgyVXpaUnUvZU15V3YrTENLS3gzTU1aZndS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
`

// kubeConfigForOCP represents a common oc kubeconfig file.
// It has a namespace set in the current context: "default"
const kubeConfigForOCP = `
apiVersion: v1
clusters:
- cluster:
    insecure-skip-tls-verify: true
    server: https://127.0.0.1:6443
  name: 127-0-0-1:6443
contexts:
- context:
    cluster: 127-0-0-1:6443
    namespace: travel-agency
    user: test/127.0.0.1:6443
  name: travel-agency/127.0.0.1:6443/test
- context:
    cluster: 192-168-39-167:8443
    namespace: default
    user: /192-168-39-167:8443
  name: default/192-168-39-167:8443/
current-context: default/192-168-39-167:8443/
kind: Config
preferences: {}
users:
- name: /192-168-39-167:8443
  user:
    client-certificate: /tmp/client.crt
    client-key: /tmp/client.key
`

func Test_getCurrentNamespaceFromKubeConfig(t *testing.T) {
	type args struct {
		filename string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			"Successfully read from KIND kubeconfig without namespace set",
			args{getTempKubeConfig(t, kubeConfigForKIND)},
			"",
		},
		{
			"Successfully read from OpenShift/oc kubeconfig with namespace set",
			args{getTempKubeConfig(t, kubeConfigForOCP)},
			"default",
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := getCurrentNamespaceFromKubeConfig(tt.args.filename); got != tt.want {
				t.Errorf("getCurrentNamespaceFromKubeConfig() = %v, want %v", got, tt.want)
			}
		})
	}
}

func Test_setCurrentNamespaceToKubeConfig_KIND(t *testing.T) {
	// this file has a context, but no namespace
	filename := getTempKubeConfig(t, kubeConfigForKIND)
	ns := "mynamespace"
	assert.NoError(t, setCurrentNamespaceToKubeConfig(filename, ns))
	assert.Equal(t, ns, getCurrentNamespaceFromKubeConfig(filename))
}

func Test_setCurrentNamespaceToKubeConfig_OpenShift(t *testing.T) {
	// this file has a context and namespace
	filename := getTempKubeConfig(t, kubeConfigForOCP)
	assert.Equal(t, "default", getCurrentNamespaceFromKubeConfig(filename))
	ns := "mynamespace"
	assert.NoError(t, setCurrentNamespaceToKubeConfig(filename, ns))
	assert.Equal(t, ns, getCurrentNamespaceFromKubeConfig(filename))
}

func getTempKubeConfig(t *testing.T, content string) string {
	kindKubeConfigTmpFile, err := ioutil.TempFile("", ".kindkubeconfig")
	assert.NoError(t, err)
	filename := kindKubeConfigTmpFile.Name()
	_, err = kindKubeConfigTmpFile.WriteString(content)
	assert.NoError(t, err)
	err = kindKubeConfigTmpFile.Close()
	assert.NoError(t, err)
	return filename
}
