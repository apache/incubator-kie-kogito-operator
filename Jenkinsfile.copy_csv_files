@Library('jenkins-pipeline-shared-libraries')_

// Pipeline moves specific csv version files from release branch to master branch

pipeline {
    agent {
        label 'kogito-operator-slave && !master'
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        timeout(time: 120, unit: 'MINUTES')
    }

    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')
        
        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')
        string(name: 'MANIFESTS_VERSION', defaultValue: '', description: 'Which version of manifests do you want to copy to master ?')
    }

    environment {
        OLM_BASE_FOLDER = "deploy/olm-catalog/kogito-operator"
        // OLM_VERSION_FOLDER => will be set in Initialization phase

        BOT_CREDENTIALS_ID = 'bsig-gh-bot'
        BOT_BRANCH_HASH = "${util.generateHash(10)}"
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanWs()

                    if (params.DISPLAY_NAME != '') {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    assert getManifestsVersion() != ''

                    env.OLM_VERSION_FOLDER = "${OLM_BASE_FOLDER}/${getManifestsVersion()}"

                    Integer[] versionSplit = util.parseVersion(getManifestsVersion())
                    String releaseBranch = "${versionSplit[0]}.${versionSplit[1]}.x"
                    echo "Release Branch ${releaseBranch}"

                    dir('operator-branch') {
                        checkoutRepo(releaseBranch)

                        // Check files are existing
                        sh "[ -d '${env.OLM_VERSION_FOLDER}' ]"
                    }
                    dir('operator-master') {
                        checkoutRepo('master')
                        sh "mkdir -p ${env.OLM_VERSION_FOLDER}"
                    }
                }
            }
        }
        
        stage('Prepare for PR'){
            steps {
                script {
                    dir('operator-master') {
                        githubscm.forkRepo(env.BOT_CREDENTIALS_ID)
                        githubscm.createBranch(getBotBranch())
                    }
                }
            }
        }

        stage('Copy files') {
            steps {
                script {
                    sh "rsync -av --progress operator-branch/${env.OLM_VERSION_FOLDER} operator-master/${env.OLM_BASE_FOLDER}"
                }
            }
        }

        stage('Create PR'){
            steps {
                script {
                    dir('operator-master'){
                        String commitMsg = "Copy manifests version ${getManifestsVersion()} to master"
                        def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}."
                        githubscm.commitChanges(commitMsg, "${OLM_BASE_FOLDER}/*")
                        githubscm.pushObject('origin', getBotBranch(), env.BOT_CREDENTIALS_ID)
                        String prLink = githubscm.createPR(commitMsg, prBody, 'master', env.BOT_CREDENTIALS_ID)
                        
                        echo "PR ${prLink} has been created. Please review it."
                    }
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}

void checkoutRepo(String branch) {
    deleteDir()
    checkout(githubscm.resolveRepository('kogito-cloud-operator', getGitAuthor(), branch, false))
}

String getManifestsVersion(){
    return params.MANIFESTS_VERSION
}

String getGitAuthor(){
    return params.GIT_AUTHOR
}

String getBotBranch(){
    return "${getManifestsVersion()}-${env.BOT_BRANCH_HASH}"
}
