@Library('jenkins-pipeline-shared-libraries')_

helper = null
testsFailed = false

gitChanges = false

pipeline {
    agent {
        docker {
            image env.AGENT_DOCKER_BUILDER_IMAGE
            args env.AGENT_DOCKER_BUILDER_ARGS
        }
    }

    options {
        timeout(time: 24, unit: 'HOURS') // Give the day to be executed (due to the lock)
        disableConcurrentBuilds() // Workaround for missing lock plugin installed on ASF Jenkins
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        PR_BRANCH_HASH = "${util.generateHash(10)}"

        // Environment required by OLM tests when run from process
        OP_TEST_CONTAINER_OPT = '-t'
        OP_TEST_DEBUG = 1
        OP_TEST_CONTAINER_TOOL = 'docker'
    }

    stages {
        stage('Setup pipeline') {
            steps {
                script {
                    helper = load '.ci/jenkins/scripts/helper.groovy'
                    helper.initPipeline()
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    helper.cleanGoPath()

                    helper.updateDisplayName()
                    helper.checkoutRepo()

                    if (helper.isRelease() || helper.isCreatePr()) {
                        // Verify version is set and if on right release branch
                        assert helper.getProjectVersion()

                        if (helper.isRelease()) {
                            assert helper.getBuildBranch() == util.getReleaseBranchFromVersion(helper.getProjectVersion())
                        }
                    }

                    // Verify we have the connectivity to Openshift
                    // TODO: Uncomment this line when we have the Openshift credentials
                    //openshift.loginOpenshift()
                }
            }
            post {
                success {
                    script {
                        properties.add('git.branch', helper.getBuildBranch())
                        properties.add('git.author', helper.getGitAuthor())
                        properties.add('project.version', helper.getProjectVersion())
                        properties.add('release', helper.isRelease())
                    }
                }
            }
        }

        stage('Prepare for PR') {
            when {
                expression { return helper.isRelease() || helper.isCreatePr() }
            }
            steps {
                script {
                    if (githubscm.isBranchExist('origin', helper.getPRBranch())) {
                        githubscm.removeRemoteBranch('origin', helper.getPRBranch(), helper.getGitAuthorPushCredsId())
                    }
                    githubscm.createBranch(helper.getPRBranch())
                }
            }
        }

        stage('Update version') {
            when {
                expression { return helper.getProjectVersion() }
            }
            steps {
                script {
                    sh "make bump-version new_version=${helper.getProjectVersion()}"
                    githubscm.setUserConfigFromCreds(getGitAuthorPushCredsId())
                    githubscm.commitChanges("Update project version to ${helper.getProjectVersion()}", {
                        sh '''
                            git add .
                            git reset -- go.mod
                            git reset -- go.sum
                        '''
                    })

                    gitChanges = true
                }
            }
        }

        stage('Test Kogito Operator & CLI') {
            when {
                expression {
                    return helper.shouldLaunchTests()
                }
            }
            steps {
                sh 'make test'
            }
            post {
                unsuccessful {
                    script {
                        util.archiveConsoleLog()
                    }
                }
            }
        }

        stage('Build Kogito Operator') {
            steps {
                sh "source ~/virtenvs/cekit/bin/activate && make BUILDER=${env.CONTAINER_ENGINE}"
            }
            post {
                unsuccessful {
                    script {
                        util.archiveConsoleLog()
                    }
                }
            }
        }

        stage('Build Kogito CLI') {
            steps {
                sh 'make build-cli'
            }
            post {
                success {
                    script {
                        archiveArtifacts artifacts: 'build/_output/bin/kogito', allowEmptyArchive: false
                    }
                }
                unsuccessful {
                    script {
                        util.archiveConsoleLog()
                    }
                }
            }
        }
        stage('Run OLM tests') {
            when {
                expression {
                    return helper.isRelease() && helper.shouldLaunchTests()
                }
            }
            steps {
                sh 'make olm-tests'
            }
            post {
                unsuccessful {
                    script {
                        util.archiveConsoleLog()
                    }
                }
            }
        }
        stage('Push Operator Image to Openshift Registry') {
            steps {
                script {
                    container.loginOpenshiftRegistry()

                    container.tagImage("quay.io/kiegroup/${env.OPERATOR_IMAGE_NAME}:${getOperatorVersion()}",
                                            helper.buildTempOpenshiftImageFullName())
                    container.pushImage(helper.buildTempOpenshiftImageFullName())
                }
            }
        }

        stage('Run BDD tests') {
            when {
                beforeOptions true
                expression {
                    return helper.shouldLaunchTests()
                }
            }
            stages {
                stage('Run full testing') {
                    options {
                        timeout(time: 360, unit: 'MINUTES')
                    }
                    steps {
                        script {
                            // Catch and set unstable so the temp image is still pushed and we get the deployment properties,
                            // in case we decide to continue in the release
                            try {
                                sh "make run-tests timeout=360 load_factor=2 concurrent=2 smoke=${params.SMOKE_TESTS_ONLY} ${getBDDParameters()}"
                            } catch (err) {
                                testsFailed = true
                                util.archiveConsoleLog()
                            }
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'test/logs/**/*.log', allowEmptyArchive: false
                            junit testResults: 'test/logs/**/junit.xml', allowEmptyResults: false
                        }
                        cleanup {
                            sh 'cd test && go run scripts/prune_namespaces.go'
                        }
                    }
                }
            }
        }

        stage('Push to registry') {
            when {
                expression { return !params.SKIP_DEPLOY }
            }
            steps {
                script {
                    helper.loginRegistry()

                    container.tagImage(helper.buildTempOpenshiftImageFullName(), helper.getImageFullTag(env.OPERATOR_IMAGE_NAME))
                    container.pushImage(helper.getImageFullTag(env.OPERATOR_IMAGE_NAME))

                    if (helper.isDeployLatestTag()) {
                        String finalFullImage = helper.getImageFullTag(env.OPERATOR_IMAGE_NAME, defaultImageParamsPrefix, 'latest')
                        container.tagImage(helper.buildTempOpenshiftImageFullName(), finalFullImage)
                        container.pushImage(finalFullImage)
                    }

                    String reducedTag = helper.getReducedTag()
                    if (reducedTag) {
                        String finalFullImage = helper.getImageFullTag(env.OPERATOR_IMAGE_NAME, defaultImageParamsPrefix, reducedTag)
                        container.tagImage(helper.buildTempOpenshiftImageFullName(), finalFullImage)
                        container.pushImage(finalFullImage)
                    }

                    // Store image deployment information
                    properties.add(helper.getImageRegistryProperty(), helper.getImageRegistry())
                    properties.add(helper.getImageNamespaceProperty(), helper.getImageNamespace())
                    properties.add(helper.getImageNamePrefixProperty(), helper.getImageNamePrefix())
                    properties.add(helper.getImageNameSuffixProperty(), helper.getImageNameSuffix())
                    properties.add(helper.getImageTagProperty(), helper.getImageTag())
                }
            }
        }

        stage('Create PR') {
            when {
                expression { return helper.isRelease() || helper.isCreatePr() }
            }
            steps {
                script {
                    if (gitChanges) {
                        String prMsg = "[${helper.getBuildBranch()}] Update version to ${helper.getProjectVersion()}"
                        def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}.\nPlease do not merge, it shoud be merged automatically."
                        githubscm.pushObject('origin', helper.getPRBranch(), helper.getGitAuthorPushCredsId())
                        prLink = githubscm.createPR(prMsg, prBody, helper.getBuildBranch(), helper.getGitAuthorCredsId())
                        properties.add("${helper.getRepoName()}.pr.link", prLink)

                        properties.add("${helper.getRepoName()}.pr.source.uri", "https://github.com/${helper.getGitAuthor()}/${helper.getRepoName()}")
                        properties.add("${helper.getRepoName()}.pr.source.ref", helper.getPRBranch())
                        properties.add("${helper.getRepoName()}.pr.target.uri", "https://github.com/${helper.getGitAuthor()}/${helper.getRepoName()}")
                        properties.add("${helper.getRepoName()}.pr.target.ref", helper.getBuildBranch())
                    } else {
                        println '[WARN] no changes to commit'
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                properties.writeToFile(env.PROPERTIES_FILE_NAME)
                archiveArtifacts(artifacts: env.PROPERTIES_FILE_NAME)

                // Verify here if BDD tests due to test errors or build error
                if (testsFailed && currentBuild.currentResult == 'SUCCESS') {
                    error 'There was a test execution failure'
                }
            }
        }
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                helper.cleanGoPath()
                util.cleanNode(containerEngine)
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Deploy', "[${helper.getBuildBranch()}] Kogito Operator", [env.KOGITO_CI_EMAIL_TO], "You can find test error logs here: ${BUILD_URL}/artifact/test/logs/error/")
    } else {
        echo 'No notification sent per configuration'
    }
}

String getOperatorVersion() {
    return sh(script: 'source ./hack/env.sh > /dev/null && echo $(getOperatorVersion)', returnStdout: true).trim()
}

// Special method to get the Openshift API in the lock because env is not accessible yet
void getLockOpenshiftApi() {
    withCredentials([string(credentialsId: 'OPENSHIFT_API', variable: 'OPENSHIFT_API')]) {
        return env.OPENSHIFT_API
    }
}

////////////////////////////////////////////////////////////////////////
// BDD parameters

String getBDDParameters() {
    Map testParamsMap = helper.getBDDCommonParameters(true)

    testParamsMap.putAll(helper.getBDDBuildImageParameters('KOGITO_IMAGES'))
    testParamsMap.putAll(helper.getBDDServicesImageParameters('KOGITO_IMAGES'))

    testParamsMap['image_cache_mode'] = params.EXAMPLES_IMAGES_CACHE_MODE
    testParamsMap.putAll(helper.getBDDRuntimeImageParameters('EXAMPLES_IMAGES'))

    // Add tags
    def tags = []
    if (params.BDD_TEST_TAGS) {
        tags.add(params.BDD_TEST_TAGS)
    }
    if (params.SKIP_NATIVE_TESTS) {
        tags.add("~${helper.getNativeTag()}")
    }
    if (params.SKIP_NON_NATIVE_TESTS) {
        tags.add("~${helper.getNonNativeTag()}")
    }
    testParamsMap['tags'] = tags.join('&&')

    String testParams = testParamsMap.findAll { entry -> entry.getValue() }
                            .collect { entry -> "${entry.getKey()}=\"${entry.getValue()}\"" }.join(' ')
    echo "BDD parameters = ${testParams}"
    return testParams
}
