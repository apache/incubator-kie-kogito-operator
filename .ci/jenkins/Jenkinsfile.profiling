@Library('jenkins-pipeline-shared-libraries')_

helper = null

pipeline {
    agent {
        label 'kogito-operator-node && !master'
    }

    // Needed for local build
    tools {
        jdk 'kie-jdk11'
        maven 'kie-maven-3.8.1'
        go 'golang-1.16'
    }

    options {
        timeout(time: 24, unit: 'HOURS') // Give the day to be executed (due to the lock)
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        CODECOV_TOKEN = credentials('KOGITO_OPERATOR_CODECOV_TOKEN')

        JAVA_HOME = "${GRAALVM_HOME}"
    }

    stages {
        stage('Setup pipeline') {
            steps {
                script {
                    helper = load '.ci/jenkins/scripts/helper.groovy'
                    helper.initPipeline()
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    helper.cleanGoPath()

                    helper.checkoutRepo()

                    // Verify we have the connectivity to Openshift
                    openshift.loginOpenshift()
                }
            }
        }

        stage('Build Kogito Operator') {
            steps {
                sh "make profiling BUILDER=${env.CONTAINER_ENGINE}"
            }
            post {
                unsuccessful {
                    script {
                        util.archiveConsoleLog()
                    }
                }
            }
        }

        stage('Build Kogito CLI') {
            steps {
                sh 'make build-cli'
            }
            post {
                success {
                    script {
                        archiveArtifacts artifacts: 'build/_output/bin/kogito', allowEmptyArchive: false
                    }
                }
                unsuccessful {
                    script {
                        util.archiveConsoleLog()
                    }
                }
            }
        }

        stage('Push Operator Image to Openshift Registry') {
            steps {
                script {
                    container.loginOpenshiftRegistry()

                    container.tagImage("quay.io/kiegroup/${env.OPERATOR_IMAGE_NAME}:${getOperatorVersion()}",
                                            helper.buildTempOpenshiftImageFullName())
                    container.pushImage(helper.buildTempOpenshiftImageFullName())
                }
            }
        }

        stage('Run BDD tests') {
            options {
                // Lock on OCP API as we want only one run at a time
                lock("BDD tests on OCP API ${getLockOpenshiftApi()}")
            }
            stages {
                stage('Run full testing') {
                    options {
                        timeout(time: 360, unit: 'MINUTES')
                    }
                    steps {
                        script {
                            // Use docker because of https://issues.redhat.com/browse/KOGITO-3512
                            try {
                                sh "make run-tests timeout=360 load_factor=3 concurrent=3 ${getBDDParameters()}"
                            } catch (err) {
                                util.archiveConsoleLog()
                            }
                        }
                    }
                    post {
                        always {
                            // Upload coverage
                            sh '''
                                curl -s https://codecov.io/bash -o codecov
                                chmod u+x codecov
                                ./codecov -f test/bdd-cover.out -F bdd -n bdd-tests &> test/logs/bdd-cover-upload.log
                            '''

                            archiveArtifacts artifacts: 'test/logs/**/*.log', allowEmptyArchive: false
                            junit testResults: 'test/logs/**/junit.xml', allowEmptyResults: false
                        }
                        cleanup {
                            sh 'cd test && go run scripts/prune_namespaces.go'
                        }
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                helper.cleanGoPath()
                util.cleanNode(containerEngine)
            }
        }
    }
}

String getOperatorVersion() {
    return sh(script: 'source ./hack/env.sh > /dev/null && echo $(getOperatorVersion)', returnStdout: true).trim()
}

// Special method to get the Openshift API in the lock because env is not accessible yet
void getLockOpenshiftApi() {
    withCredentials([string(credentialsId: 'OPENSHIFT_API', variable: 'OPENSHIFT_API')]) {
        return env.OPENSHIFT_API
    }
}

void sendNotification() {
    mailer.sendMarkdownTestSummaryNotification('Profiling', "[${helper.getBuildBranch()}] Kogito Operator", [env.KOGITO_CI_EMAIL_TO], "You can find test error logs here: ${BUILD_URL}/artifact/test/logs/error/")
}

////////////////////////////////////////////////////////////////////////
// BDD parameters

String getBDDParameters() {
    Map testParamsMap = helper.getBDDCommonParameters(true)

    testParamsMap['operator_profiling'] = true
    testParamsMap['operator_yaml_uri'] = '../profiling/kogito-operator-profiling.yaml'

    // Reuse runtime application images from nightly builds
    testParamsMap['image_cache_mode'] = 'always'
    testParamsMap['runtime_application_image_registry'] = 'quay.io/kiegroup'

    String testParams = testParamsMap.findAll { entry -> entry.getValue() }
                            .collect { entry -> "${entry.getKey()}=\"${entry.getValue()}\"" }.join(' ')
    echo "BDD parameters = ${testParams}"
    return testParams
}
