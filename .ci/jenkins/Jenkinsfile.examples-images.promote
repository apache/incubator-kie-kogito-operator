@Library('jenkins-pipeline-shared-libraries')_

helper = null

pipeline {
    agent {
        label 'rhel8 && podman && !built-in'
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    environment {
        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        CONTAINER_ENGINE = 'podman'
        CONTAINER_ENGINE_TLS_OPTIONS = '--tls-verify=false'
    }

    stages {
        stage('Setup pipeline') {
            steps {
                script {
                    helper = load '.ci/jenkins/scripts/helper.groovy'
                    helper.initPipeline()
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    helper.cleanGoPath()

                    helper.updateDisplayName()

                    properties.readFromUrl(helper.getDeployPropertiesFileUrl())

                    assert helper.getProjectVersion()
                    assert helper.getBuildBranch() == util.getReleaseBranchFromVersion(helper.getProjectVersion())

                    cloud.installSkopeo()
                }
            }
        }
        stage('Promote images') {
            steps {
                script {
                    helper.loginRegistry(baseImageParamsPrefix)
                    helper.loginRegistry(promoteImageParamsPrefix)

                    for (String imageName : getImages()) {
                        String imageTag = helper.getImageFullTag(imageName, baseImageParamsPrefix)
                        helper.promoteImage(imageTag, helper.getImageFullTag(imageName, promoteImageParamsPrefix))
                        if (helper.isDeployLatestTag()) {
                            helper.promoteImage(imageTag, helper.getImageFullTag(imageName, promoteImageParamsPrefix, 'latest'))
                        }
                        String reducedTag = getReducedTag()
                        if (reducedTag) {
                            helper.promoteImage(imageTag, helper.getImageFullTag(imageName, promoteImageParamsPrefix, reducedTag))
                        }
                    }
                }
            }
        }

        stage('Make Quay images public') {
            when {
                expression { helper.isQuayRegistry(promoteImageParamsPrefix) }
            }
            steps {
                script {
                    for (String imageName : getImages()) {
                        helper.makeQuayImagePublic(helper.getFullImageName(imageName, promoteImageParamsPrefix), promoteImageParamsPrefix)
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                helper.cleanGoPath()
                util.cleanNode(containerEngine)
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Promote', "[${helper.getBuildBranch()}] Kogito Examples Images", [env.KOGITO_CI_EMAIL_TO])
    } else {
        echo 'No notification sent per configuration'
    }
}

List getImages() {
    return helper.getImageNames(baseImageParamsPrefix)
}
