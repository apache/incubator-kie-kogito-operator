@Library('jenkins-pipeline-shared-libraries')_

helper = null
testsFailed = false

pipeline {
    agent {
        label 'kogito-operator-node && !built-in'
    }

    // Needed for local build
    tools {
        jdk 'kie-jdk11'
        maven 'kie-maven-3.8.1'
        go 'golang-1.17'
    }

    options {
        timeout(time: 360, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into ./dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into ./dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        JAVA_HOME = "${GRAALVM_HOME}"
    }

    stages {
        stage('Setup pipeline') {
            steps {
                script {
                    helper = load '.ci/jenkins/scripts/helper.groovy'
                    helper.initPipeline()
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    helper.cleanGoPath()

                    helper.updateDisplayName()
                    helper.checkoutRepo()

                    // Openshift login is needed for the examples generation
                    openshift.loginOpenshift()

                    helper.loginRegistry()
                }
            }
            post {
                success {
                    script {
                        properties.add('git.branch', helper.getBuildBranch())
                        properties.add('git.author', helper.getGitAuthor())
                    }
                }
            }
        }

        stage('Build examples images') {
            when {
                expression { return !params.SKIP_NON_NATIVE_TESTS }
            }
            steps {
                script {
                    try {
                        // Use docker because of https://issues.redhat.com/browse/KOGITO-3512
                        sh "make build-examples-images concurrent=3 smoke=${params.SMOKE_TESTS_ONLY} ${getExamplesBuildParameters(false)}"
                    } catch (err) {
                        testsFailed = true
                        util.archiveConsoleLog()
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test/examples/logs/**/*.log', allowEmptyArchive: false
                    junit testResults: 'test/examples/logs/**/junit.xml', allowEmptyResults: false
                }
            }
        }

        stage('Build native examples images') {
            when {
                expression { return !params.SMOKE_TESTS_ONLY && !params.SKIP_NATIVE_TESTS }
            }
            steps {
                script {
                    try {
                        // Optaplanner taking a lot of resources, we should not build in parallel
                        // There seems to be a problem with podman executed from the BDD tests ... Using docker instead for now ...
                        sh "make build-examples-images concurrent=1 ${getExamplesBuildParameters(true)}"
                    } catch (err) {
                        testsFailed = true
                        util.archiveConsoleLog()
                    } finally {
                        // moving to another folder to avoid conflicts with junit
                        sh 'cp -r test/examples test/examples-native'
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test/examples/logs/**/*.log', allowEmptyArchive: true
                    junit testResults: 'test/examples-native/logs/**/junit.xml', allowEmptyResults: true
                }
            }
        }

        stage('Handle built images') {
            steps {
                script {
                    // Retrieve the list of images
                    images = readFile(file: 'test/examples/logs/built_project_image_names.log').split('\n')

                    for (String imageName : images) {
                        if (helper.isDeployLatestTag()) {
                            String finalFullImage = helper.getImageFullTag(imageName, defaultImageParamsPrefix, 'latest')
                            container.tagImage(helper.getImageFullTag(imageName), finalFullImage)
                            container.pushImage(finalFullImage)
                        }
                        String reducedTag = helper.getReducedTag()
                        if (reducedTag) {
                            String finalFullImage = helper.getImageFullTag(imageName, defaultImageParamsPrefix, reducedTag)
                            container.tagImage(helper.getImageFullTag(imageName), finalFullImage)
                            container.pushImage(finalFullImage)
                        }

                        if (helper.getImageRegistry() == 'quay.io') {
                            helper.makeQuayImagePublic(helper.getFullImageName(imageName))
                        }
                    }

                    // Store image deployment information
                    properties.add(helper.getImageRegistryProperty(), helper.getImageRegistry())
                    properties.add(helper.getImageNamespaceProperty(), helper.getImageNamespace())
                    properties.add(helper.getImageNamePrefixProperty(), helper.getImageNamePrefix())
                    properties.add(helper.getImageNameSuffixProperty(), helper.getImageNameSuffix())
                    properties.add(helper.getImageNamesProperty(), images.join(','))
                    properties.add(helper.getImageTagProperty(), helper.getImageTag())
                }
            }
        }
    }
    post {
        always {
            script {
                properties.writeToFile(env.PROPERTIES_FILE_NAME)
                archiveArtifacts(artifacts: env.PROPERTIES_FILE_NAME)

                // Verify here if BDD tests due to test errors or build error
                if (testsFailed && currentBuild.currentResult == 'SUCCESS') {
                    error 'There was a test execution failure'
                }
            }
        }
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                helper.cleanGoPath()
                util.cleanNode(containerEngine)
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        mailer.sendMarkdownTestSummaryNotification('Deploy', "[${helper.getBuildBranch()}] Kogito Examples Images", [env.KOGITO_CI_EMAIL_TO], "You can find test error logs here: ${BUILD_URL}/artifact/test/examples/logs/error/")
    } else {
        echo 'No notification sent per configuration'
    }
}

////////////////////////////////////////////////////////////////////////
// BDD parameters
////////////////////////////////////////////////////////////////////////

String getExamplesBuildParameters(boolean nativeTag = false) {
    Map testParamsMap = helper.getBDDCommonParameters(true)

    testParamsMap['image_cache_mode'] = 'never'
    testParamsMap.putAll(helper.getBDDRuntimeImageParameters())

    // May be used by the features ...
    testParamsMap.putAll(helper.getBDDBuildImageParameters('KOGITO_IMAGES'))
    testParamsMap.putAll(helper.getBDDServicesImageParameters('KOGITO_IMAGES'))

    def tags = []
    tags.add('@rhpam') // Build only product features
    tags.add("~@native") // No native features
    if (params.BDD_TEST_TAGS) {
        tags.add(params.BDD_TEST_TAGS)
    }
    testParamsMap['tags'] = tags.join('&&')

    String testParams = testParamsMap.findAll { entry -> entry.getValue() }
                            .collect { entry -> "${entry.getKey()}=\"${entry.getValue()}\"" }.join(' ')
    echo "Example Build parameters = ${testParams}"
    return testParams
}
