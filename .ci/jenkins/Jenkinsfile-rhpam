@Library('jenkins-pipeline-shared-libraries')_

def changeAuthor = env.ghprbPullAuthorLogin ?: CHANGE_AUTHOR
def changeBranch = env.ghprbSourceBranch ?: CHANGE_BRANCH
def changeTarget = env.ghprbTargetBranch ?: CHANGE_TARGET

testsFailed = false

pipeline {
    agent {
        label 'kogito-operator-node-test-1.17 && !master'
    }
    tools {
        go 'golang-1.17'
    }
    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        timeout(time: 12, unit: 'HOURS') // We give a lot of time to timeout due to the lock on Openshift
    }
    environment {
        OPENSHIFT_INTERNAL_REGISTRY = 'image-registry.openshift-image-registry.svc:5000'

        CONTAINER_ENGINE = 'podman'
    }
    stages {
        stage('Initialize') {
            steps {
                script {
                    cleanGoPath()

                    sh ' git config --global user.email "jenkins@kie.com" '
                    sh ' git config --global user.name "kie user"'
                    githubscm.checkoutIfExists('kogito-operator', changeAuthor, changeBranch, 'kiegroup', changeTarget, true, ['token' : 'GITHUB_TOKEN', 'usernamePassword' : 'user-kie-ci10'])
                    sh "set +x && oc login --token=\$(oc whoami -t) --server=${OPENSHIFT_API} --insecure-skip-tls-verify"
                    sh """
                        usermod --add-subuids 10000-75535 \$(whoami)
                        usermod --add-subgids 10000-75535 \$(whoami)
                    """
                }
            }
        }
        stage('Build RHPAM Kogito Operator') {
            steps {
                // Workaround until Operator PR checks is solved
                sh "echo '' > content_sets.yaml"

                sh "make -f Makefile.rhpam BUILDER=${CONTAINER_ENGINE}"
            }
        }
        stage('Push Operator Image(s) to Openshift Registry') {
            steps {
                sh """
                    set +x && ${CONTAINER_ENGINE} login -u jenkins -p \$(oc whoami -t) --tls-verify=false ${OPENSHIFT_REGISTRY}
                    TAG_OPERATOR=\$(go run version/getrhpamversion.go)

                    ${CONTAINER_ENGINE} tag registry.stage.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator:\${TAG_OPERATOR} ${OPENSHIFT_REGISTRY}/openshift/rhpam-kogito-rhel8-operator:pr-\$(echo \${GIT_COMMIT} | cut -c1-7)
                    ${CONTAINER_ENGINE} push --tls-verify=false ${OPENSHIFT_REGISTRY}/openshift/rhpam-kogito-rhel8-operator:pr-\$(echo \${GIT_COMMIT} | cut -c1-7)
                """
            }
        }

        stage('Run BDD tests') {
            options {
                lock("BDD tests ${OPENSHIFT_API}")
            }
            stages {
                stage('Running smoke tests') {
                    options {
                        timeout(time: 90, unit: 'MINUTES')
                    }
                    steps {
                        script {
                            try {
                                // Run just smoke tests to verify basic operator functionality
                                sh "make run-smoke-tests tags='@rhpam' concurrent=5 ${getBDDParameters()}"
                            } catch (err) {
                                testsFailed = true
                                util.archiveConsoleLog()
                            }
                        }
                    }
                    post {
                        always {
                            archiveArtifacts artifacts: 'test/logs/**/*.log', allowEmptyArchive: true
                            junit testResults: 'test/logs/**/junit.xml', allowEmptyResults: true
                        }
                        cleanup {
                            sh 'cd test && go run scripts/prune_namespaces.go'
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                // Verify here if BDD tests due to test errors or build error
                if (testsFailed && currentBuild.currentResult == 'SUCCESS') {
                    error 'There was a test execution failure'
                }
            }
        }
        unsuccessful {
            script {
                def additionalInfo = "You can find test error logs here: ${BUILD_URL}/artifact/test/logs/error/"
                pullrequest.postComment(util.getMarkdownTestSummary('RHPAM PR', additionalInfo, "${BUILD_URL}", 'GITHUB'), 'GITHUB_TOKEN')
            }
        }
        cleanup {
            script {
                cleanGoPath()
                cleanWs()
            }
        }
    }
}

void cleanGoPath() {
    sh 'rm -rf $GOPATH/bin/*'
}

String getBDDParameters() {
    testParamsMap = [:]

    testParamsMap['load_default_config'] = true
    testParamsMap['ci'] = 'j'
    testParamsMap['load_factor'] = 3
    testParamsMap['disable_maven_native_build_container'] = true

    testParamsMap['operator_image_tag'] = "${OPENSHIFT_REGISTRY}/openshift/rhpam-kogito-rhel8-operator:pr-\$(echo \${GIT_COMMIT} | cut -c1-7)"

    if (env.MAVEN_MIRROR_REPOSITORY) {
        testParamsMap['maven_mirror_url'] = env.MAVEN_MIRROR_REPOSITORY
        testParamsMap['maven_ignore_self_signed_certificate'] = true
    }

    // Reuse runtime application images from nightly builds
    testParamsMap['image_cache_mode'] = 'always'

    // Don't run tests using CLI as it is not supported for product
    testParamsMap['cr_deployment_only'] = 'true'
    testParamsMap['use_product_operator'] = 'true'

    testParamsMap['container_engine'] = env.CONTAINER_ENGINE

    // Clean the cluster before/after BDD test execution
    testParamsMap['enable_clean_cluster'] = true

    String testParams = testParamsMap.collect { entry -> "${entry.getKey()}=\"${entry.getValue()}\"" }.join(' ')
    echo "BDD parameters = ${testParams}"
    return testParams
}
