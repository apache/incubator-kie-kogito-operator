@Library('jenkins-pipeline-shared-libraries')_

helper = null

pipeline {
    agent {
        label 'kogito-operator-slave && !master'
    }

    // Needed for local build
    tools {
        jdk 'kie-jdk11'
    }

    options {
        timeout(time: 360, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        JAVA_HOME = "${GRAALVM_HOME}"

        BOT_BRANCH_HASH = "${util.generateHash(10)}"

        // Environment required by OLM tests when run from process
        OP_TEST_CONTAINER_OPT = '-t'
        OP_TEST_DEBUG = 1
        OP_TEST_CONTAINER_TOOL = 'docker'
    }

    stages {
        stage('Setup pipeline') {
            steps {
                script {
                    helper = load '.jenkins/scripts/helper.groovy'
                    helper.initPipeline()
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    helper.updateDisplayName()
                    helper.checkoutRepo()

                    if (helper.isRelease() || helper.isCreatePr()) {
                        // Verify version is set and if on right release branch
                        assert helper.getProjectVersion()

                        if(helper.isRelease()){
                            assert helper.getBuildBranch() == util.getReleaseBranchFromVersion(helper.getProjectVersion())
                        }
                    }

                    // Verify we have the connectivity to Openshift
                    openshift.loginOpenshift()
                }
            }
            post {
                success {
                    script {
                        properties.add('git.branch', helper.getBuildBranch())
                        properties.add('git.author', helper.getGitAuthor())
                        properties.add('project.version', helper.getProjectVersion())
                        properties.add('release', helper.isRelease())
                    }
                }
            }
        }

        stage('Prepare for PR') {
            when {
                expression { return helper.isRelease() || helper.isCreatePr() }
            }
            steps {
                script {
                    githubscm.forkRepo(helper.getBotAuthorCredsID())
                    githubscm.createBranch(helper.getBotBranch())
                }
            }
        }

        stage('Update version') {
            when {
                expression { return helper.getProjectVersion() }
            }
            steps {
                script {
                    sh "make bump-version new_version=${helper.getProjectVersion()}"

                    githubscm.commitChanges("Update project version to ${helper.getProjectVersion()}", {
                        sh '''
                            git add .
                            git reset -- go.mod
                            git reset -- go.sum
                        '''
                    })
                }
            }
        }

        stage('Test Kogito Operator & CLI') {
            when {
                expression {
                    return helper.shouldLaunchTests()
                }
            }
            steps {
                sh 'make test'
            }
        }

        stage('Build Kogito Operator') {
            steps {
                sh "make BUILDER=${env.CONTAINER_ENGINE}"
            }
        }

        stage('Build Kogito CLI') {
            steps {
                sh 'make build-cli'
            }
            post {
                success {
                    script {
                        archiveArtifacts artifacts: 'build/_output/bin/kogito', allowEmptyArchive: false
                    }
                }
            }
        }
        stage('Run OLM tests') {
            when {
                expression {
                    return helper.shouldLaunchTests()
                }
            }
            steps {
                sh 'make olm-tests'
            }
        }
        stage('Push Operator Image to Openshift Registry') {
            steps {
                script {
                    container.loginOpenshiftRegistry()

                    container.tagImage("quay.io/kiegroup/${env.OPERATOR_IMAGE_NAME}:${getOperatorVersion()}", 
                                            helper.buildTempOpenshiftImageFullName())
                    container.pushImage(helper.buildTempOpenshiftImageFullName())
                }
            }
        }

        stage('Run BDD tests') {
            when {
                expression {
                    return helper.shouldLaunchTests()
                }
            }
            options {
                // Lock on OCP API as we want only one run at a time
                lock("BDD tests on OCP API ${getLockOpenshiftApi()}")
            }
            steps {
                script {
                    // Catch and set unstable so the temp image is still pushed and we get the deployment properties,
                    // in case we decide to continue in the release
                    try {
                        // Use docker because of https://issues.redhat.com/browse/KOGITO-3512
                        sh "make run-tests timeout=360 load_factor=1 concurrent=3 smoke=${params.SMOKE_TESTS_ONLY} ${getBDDParameters()}"
                    } catch (err) {
                        unstable('Tests are failing')
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test/logs/**/*.log', allowEmptyArchive: true
                    junit testResults: 'test/logs/**/junit.xml', allowEmptyResults: true
                }
                cleanup {
                    sh 'cd test && go run scripts/prune_namespaces.go'
                }
            }
        }

        stage('Push to registry') {
            steps {
                script {
                    helper.loginRegistry()

                    container.tagImage(helper.buildTempOpenshiftImageFullName(), helper.getImageFullTag(env.OPERATOR_IMAGE_NAME))
                    container.pushImage(helper.getImageFullTag(env.OPERATOR_IMAGE_NAME))

                    // Store image deployment information
                    properties.add(helper.getImageRegistryProperty(), helper.getImageRegistry())
                    properties.add(helper.getImageNamespaceProperty(), helper.getImageNamespace())
                    properties.add(helper.getImageNamePrefixProperty(), helper.getImageNamePrefix())
                    properties.add(helper.getImageNameSuffixProperty(), helper.getImageNameSuffix())
                    properties.add(helper.getImageTagProperty(), helper.getImageTag())
                }
            }
        }

        stage('Create PR') {
            when {
                expression { return helper.isRelease() || helper.isCreatePr() }
            }
            steps {
                script {
                    if (githubscm.isThereAnyChanges()) {
                        String prMsg = "[${helper.getBuildBranch()}] Update version to ${helper.getProjectVersion()}"
                        def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}.\nPlease do not merge, it shoud be merged automatically."
                        githubscm.pushObject('origin', helper.getBotBranch(), helper.getBotAuthorCredsID())
                        prLink = githubscm.createPR(prMsg, prBody, helper.getBuildBranch(), helper.getBotAuthorCredsID())
                        properties.add("${helper.getRepoName()}.pr.link", prLink)

                        properties.add("${helper.getRepoName()}.pr.source.uri", "https://github.com/${helper.getBotAuthor()}/${helper.getRepoName()}")
                        properties.add("${helper.getRepoName()}.pr.source.ref", helper.getBotBranch())
                        properties.add("${helper.getRepoName()}.pr.target.uri", "https://github.com/${helper.getGitAuthor()}/${helper.getRepoName()}")
                        properties.add("${helper.getRepoName()}.pr.target.ref", helper.getBuildBranch())
                    } else {
                        println '[WARN] no changes to commit'
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                properties.writeToFile(env.PROPERTIES_FILE_NAME)
                archiveArtifacts(artifacts: env.PROPERTIES_FILE_NAME)
            }
        }
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                util.cleanNode(containerEngine)
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        emailext body: "**Deploy job** #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}",
             subject: "[${helper.getBuildBranch()}] Kogito Operator",
             to: env.KOGITO_CI_EMAIL_TO
    } else {
        echo 'No notification sent per configuration'
    }
}

String getOperatorVersion() {
    return sh(script: 'source ./hack/env.sh > /dev/null && echo $(getOperatorVersion)', returnStdout: true).trim()
}

// Special method to get the Openshift API in the lock because env is not accessible yet
void getLockOpenshiftApi() {
    withCredentials([string(credentialsId: 'OPENSHIFT_API', variable: 'OPENSHIFT_API')]) {
        return env.OPENSHIFT_API
    }
}

////////////////////////////////////////////////////////////////////////
// BDD parameters

String getBDDParameters() {
    Map testParamsMap = helper.getBDDCommonParameters(true)

    testParamsMap.putAll(helper.getBDDBuildImageParameters('KOGITO_IMAGES'))
    testParamsMap.putAll(helper.getBDDServicesImageParameters('KOGITO_IMAGES'))

    testParamsMap['image_cache_mode'] = params.EXAMPLES_IMAGES_CACHE_MODE
    testParamsMap.putAll(helper.getBDDRuntimeImageParameters('EXAMPLES_IMAGES'))

    // Add tags
    def tags = []
    if (params.BDD_TEST_TAGS) {
        tags.add(params.BDD_TEST_TAGS)
    }
    if (params.SKIP_NATIVE_TESTS) {
        tags.add(helper.getNonNativeTag())
    }
    testParamsMap['tags'] = tags.join('&&')

    String testParams = testParamsMap.findAll { entry -> entry.getValue() }
                            .collect { entry -> "${entry.getKey()}=\"${entry.getValue()}\"" }.join(' ')
    echo "BDD parameters = ${testParams}"
    return testParams
}
