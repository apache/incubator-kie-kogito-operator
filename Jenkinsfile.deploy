@Library('jenkins-pipeline-shared-libraries')_

pipeline {
    agent {
        label 'kogito-operator-slave && !master'
    }

    // Needed for local build
    tools {
        jdk 'kie-jdk11'
    }

    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')
        
        string(name: 'BUILD_BRANCH_NAME', defaultValue: 'master', description: 'Which branch to build ? Set if you are not on a multibranch pipeline.')
        string(name: 'GIT_AUTHOR', defaultValue: 'kiegroup', description: 'Which Git author repository ?')

        booleanParam(name: 'IMAGE_USE_OPENSHIFT_REGISTRY', defaultValue: false, description: 'Set to true if image should be deployed in Openshift registry.In this case, IMAGE_REGISTRY_CREDENTIALS, IMAGE_REGISTRY and IMAGE_NAMESPACE parameters will be ignored')
        string(name: 'IMAGE_REGISTRY_CREDENTIALS', defaultValue: '', description: 'Image registry credentials to use to deploy images. Will be ignored if no IMAGE_REGISTRY is given')
        string(name: 'IMAGE_REGISTRY', defaultValue: '', description: 'Image registry to use to deploy images')
        string(name: 'IMAGE_NAMESPACE', defaultValue: 'kiegroup', description: 'Image namespace to use to deploy images')
        string(name: 'IMAGE_NAME_SUFFIX', defaultValue: '', description: 'Image name suffix to use to deploy images. In case you need to change the final image name, you can add a suffix to it.')
        string(name: 'IMAGE_TAG', defaultValue: '', description: 'Image tag to use to deploy images')

        // To define if needed. If not, default config will apply
        booleanParam(name: 'KOGITO_IMAGES_IN_OPENSHIFT_REGISTRY', defaultValue: false, description: 'Set to true if kogito images for tests are in internal Openshift registry.In this case, KOGITO_IMAGES_REGISTRY and KOGITO_IMAGES_NAMESPACE parameters will be ignored')
        string(name: 'KOGITO_IMAGES_REGISTRY', defaultValue: '', description: 'Test images registry')
        string(name: 'KOGITO_IMAGES_NAMESPACE', defaultValue: '', description: 'Test images namespace')
        string(name: 'KOGITO_IMAGES_NAME_SUFFIX', defaultValue: '', description: 'Test images name suffix')
        string(name: 'KOGITO_IMAGES_TAG', defaultValue: '', description: 'Test images tag')
        string(name: 'EXAMPLES_REF', defaultValue: '', description: 'Git reference (branch/tag) to the kogito-examples repository to use for tests.')

        string(name: 'MAVEN_ARTIFACT_REPOSITORY', defaultValue: '', description: 'Maven repository where the build artifacts are present')
        booleanParam(name: 'SMOKE_TESTS_ONLY', defaultValue: false, description: 'If only smoke tests should be run. Default is full testing.')
        booleanParam(name: 'SKIP_TESTS', defaultValue: false, description: 'Skip tests')
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
        timeout(time: 360, unit: 'MINUTES')
    }

    environment {
        JAVA_HOME = "${GRAALVM_HOME}"
        
        OPERATOR_IMAGE_NAME="kogito-cloud-operator"

        OPENSHIFT_API = credentials("OPENSHIFT_API")
        OPENSHIFT_REGISTRY = credentials("OPENSHIFT_REGISTRY")
        OPENSHIFT_INTERNAL_REGISTRY = "image-registry.openshift-image-registry.svc:5000"
        OPENSHIFT_CREDS_KEY = "OPENSHIFT_CREDS"

        // Here under is a list of env variable which are defined dynamically into the pipeline
        // We don't define them here because then there would be immutable ...
        // TEST_PARAMS => parameters which will be set in `configure testing` stage, depending also on pipeline params
    }
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    // Make sure Openshift is available and can authenticate before continuing
                    loginOpenshift()

                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    checkout(githubscm.resolveRepository("kogito-cloud-operator", params.GIT_AUTHOR, params.BUILD_BRANCH_NAME, false))
                }
            }
        }
        stage('Build Kogito Operator') {
            steps {
                sh """
                    go get -u golang.org/x/lint/golint
                    make image_builder=podman
                """
            }
            
        }
        stage('Build Kogito CLI') {
            steps {
                sh """
                    go get -u github.com/gobuffalo/packr/v2/packr2
                    make build-cli
                """
            }
        }
        stage('Push Operator Image to Openshift Registry') {
            steps {
                loginOpenshiftRegistry()
                sh """
                    podman tag quay.io/kiegroup/${OPERATOR_IMAGE_NAME}:${getOperatorVersion()} ${buildTempOpenshiftImageFullName()}
                    podman push --tls-verify=false ${buildTempOpenshiftImageFullName()}
                """
            }
        }
        stage("Build examples' images for testing"){
            when {
                expression {
                    return !params.SKIP_TESTS;
                }
            }
            steps {
                script {
                    // Optaplanner taking a lot of resources, we should not build in parallel
                    sh "make build-examples-images concurrent=1 ${getBDDParameters()}"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test/logs/**/*.log', allowEmptyArchive: true
                    junit testResults: 'test/logs/**/junit.xml', allowEmptyResults: true
                    sh "cd test && go run scripts/prune_namespaces.go"
                }
            }
        }
        stage('Run Full Testing') {
            when {
                expression {
                    return !params.SKIP_TESTS;
                }
            }
            steps {
                script {
                    sh "make run-tests load_factor=3 concurrent=3 image_cache_mode=always smoke=${params.SMOKE_TESTS_ONLY} ${getBDDParameters()}"
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'test/logs/**/*.log', allowEmptyArchive: true
                    junit testResults: 'test/logs/**/junit.xml', allowEmptyResults: true
                    sh "cd test && go run scripts/prune_namespaces.go"
                }
            }
        }
        stage('Push to registry') {
            steps {
                script {
                    if (isDeployImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getDeployImageRegistryCredentials() != ''){
                        loginContainerRegistry(getDeployImageRegistry(), getDeployImageRegistryCredentials())
                    }
                    tagImage()
                    pushImage()
                }
            }
        }
        // TODO archive CLI as artifact
    }
}

String getOperatorVersion(){
    return sh(script: "cd version/ && TAG_OPERATOR=\$(grep -m 1 'Version =' version.go) && TAG_OPERATOR=\$(echo \${TAG_OPERATOR#*=} | tr -d '\"') && echo \${TAG_OPERATOR}", returnStdout: true).trim()
}

void tagImage(){
    sh "podman tag ${buildTempOpenshiftImageFullName()} ${buildFinalImageFullName()}"
}

void pushImage(){
    sh "podman push --tls-verify=false ${buildFinalImageFullName()}"
}

String buildTempOpenshiftImageFullName(boolean internal=false){
    return "${getTempOpenshiftImageName(internal)}:${getTempTag()}"
}
String getTempOpenshiftImageName(boolean internal=false){
    String registry = internal ? env.OPENSHIFT_INTERNAL_REGISTRY : env.OPENSHIFT_REGISTRY
    return "${registry}/openshift/${OPERATOR_IMAGE_NAME}"
}

String buildFinalImageFullName(){
    String finalImageName = env.OPERATOR_IMAGE_NAME
    if(getDeployImageNameSuffix() != ''){
        finalImageName += "-" + getDeployImageNameSuffix()
    }
    return "${getDeployImageRegistry()}/${getDeployImageNamespace()}/${finalImageName}:${getDeployImageTag()}"
}

void loginOpenshift(){
    withCredentials([usernamePassword(credentialsId: env.OPENSHIFT_CREDS_KEY, usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]){
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry(){
    loginOpenshift()
    // username can be anything. See https://docs.openshift.com/container-platform/4.4/registry/accessing-the-registry.html#registry-accessing-directly_accessing-the-registry
    sh "set +x && podman login -u anything -p \$(oc whoami -t) --tls-verify=false ${env.OPENSHIFT_REGISTRY}"
}

void loginContainerRegistry(String registry, String credsId){
    withCredentials([usernamePassword(credentialsId: credsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "podman login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} --tls-verify=false ${registry}"
    }
}

String getTempTag(){
    hash = sh(returnStdout: true,script: 'git rev-parse --short HEAD').trim()
    return "pr-${hash}"
}

////////////////////////////////////////////////////////////////////////
// Deploy image information
////////////////////////////////////////////////////////////////////////

boolean isDeployImageInOpenshiftRegistry(){
    return params.IMAGE_USE_OPENSHIFT_REGISTRY
}

String getDeployImageRegistryCredentials(){
    return isDeployImageInOpenshiftRegistry() ? "" : params.IMAGE_REGISTRY_CREDENTIALS
}

String getDeployImageRegistry(){
    return isDeployImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.IMAGE_REGISTRY
}

String getDeployImageNamespace(){
    return isDeployImageInOpenshiftRegistry() ? "openshift" : params.IMAGE_NAMESPACE
}

String getDeployImageNameSuffix(){
    return params.IMAGE_NAME_SUFFIX
}

String getDeployImageTag(){
    if (params.IMAGE_TAG != ""){
        return params.IMAGE_TAG
    } else {
        sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
    }
}

////////////////////////////////////////////////////////////////////////
// BDD parameters
////////////////////////////////////////////////////////////////////////

String getBDDParameters() {
    testParamsMap = [:]

    testParamsMap["load_default_config"] = true
    testParamsMap["ci"] = "jenkins"

    testParamsMap["operator_image"] = getTempOpenshiftImageName(true)
    testParamsMap["operator_tag"] = getTempTag()

    if (params.MAVEN_ARTIFACT_REPOSITORY != '') {
        // No mirror if we set directly the Maven repository
        // Tests will be slower but we need to test against specific artifacts
        testParamsMap["custom_maven_repo"] = params.MAVEN_ARTIFACT_REPOSITORY
    } else if(env.MAVEN_MIRROR_REPOSITORY != null
                && env.MAVEN_MIRROR_REPOSITORY != '') {
        testParamsMap["maven_mirror"] = env.MAVEN_MIRROR_REPOSITORY
    }

    if (params.KOGITO_IMAGES_IN_OPENSHIFT_REGISTRY) {
        testParamsMap["build_image_registry"] = env.OPENSHIFT_INTERNAL_REGISTRY
        testParamsMap["services_image_registry"] = env.OPENSHIFT_INTERNAL_REGISTRY
        testParamsMap["runtime_application_image_registry"] = env.OPENSHIFT_INTERNAL_REGISTRY
        testParamsMap["build_image_namespace"] = "openshift"
        testParamsMap["services_image_namespace"] = "openshift"
        testParamsMap["runtime_application_image_namespace"] = "openshift"
    } else {
        if(params.KOGITO_IMAGES_REGISTRY != '') {
            testParamsMap["build_image_registry"] = params.KOGITO_IMAGES_REGISTRY
            testParamsMap["services_image_registry"] = params.KOGITO_IMAGES_REGISTRY
            testParamsMap["runtime_application_image_registry"] = params.KOGITO_IMAGES_REGISTRY
        }
        if(params.KOGITO_IMAGES_NAMESPACE != '') {
            testParamsMap["build_image_namespace"] = params.KOGITO_IMAGES_NAMESPACE
            testParamsMap["services_image_namespace"] = params.KOGITO_IMAGES_NAMESPACE
            testParamsMap["runtime_application_image_namespace"] = params.KOGITO_IMAGES_NAMESPACE
        }
    }
    if(params.KOGITO_IMAGES_NAME_SUFFIX != '') {
        testParamsMap["build_image_name_suffix"] = params.KOGITO_IMAGES_NAME_SUFFIX
        testParamsMap["services_image_name_suffix"] = params.KOGITO_IMAGES_NAME_SUFFIX
        testParamsMap["runtime_application_image_name_suffix"] = params.KOGITO_IMAGES_NAME_SUFFIX
    }
    if(params.KOGITO_IMAGES_TAG != '') {
        testParamsMap["build_image_version"] = params.KOGITO_IMAGES_TAG
        testParamsMap["services_image_version"] = params.KOGITO_IMAGES_TAG
        testParamsMap["runtime_application_image_version"] = params.KOGITO_IMAGES_TAG
    }
    if(params.EXAMPLES_REF != '') {
        testParamsMap["examples_ref"] = params.EXAMPLES_REF
    }

    String testParams = testParamsMap.collect{ entry -> "${entry.getKey()}=\"${entry.getValue()}\"" }.join(" ")
    echo "Test parameters = ${testParams}"
    return testParams
}