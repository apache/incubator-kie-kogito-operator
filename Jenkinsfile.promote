// Promote images

IMAGES = ["kogito-cloud-operator"]

pipeline {
    agent { label 'jenkins-slave' }

    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')

        string(name: 'BASE_IMAGE_REGISTRY_CREDENTIALS', defaultValue: '', description: 'Base Image registry credentials to use to deploy images. Will be ignored if no BASE_IMAGE_REGISTRY is given')
        string(name: 'BASE_IMAGE_REGISTRY', defaultValue: '', description: 'Base image registry')
        string(name: 'BASE_IMAGE_NAMESPACE', defaultValue: 'kiegroup', description: 'Base image namespace')
        string(name: 'BASE_IMAGE_NAME_SUFFIX', defaultValue: '', description: 'Base image name suffix')
        string(name: 'BASE_IMAGE_TAG', defaultValue: '', description: 'Base image tag')

        string(name: 'PROMOTE_IMAGE_REGISTRY_CREDENTIALS', defaultValue: '', description: 'Promote Image registry credentials to use to deploy images. Will be ignored if no PROMOTE_IMAGE_REGISTRY is given')
        string(name: 'PROMOTE_IMAGE_REGISTRY', defaultValue: '', description: 'Promote image registry')
        string(name: 'PROMOTE_IMAGE_NAMESPACE', defaultValue: 'kiegroup', description: 'Promote image namespace')
        string(name: 'PROMOTE_IMAGE_NAME_SUFFIX', defaultValue: '', description: 'Promote image name suffix')
        string(name: 'PROMOTE_IMAGE_TAG', defaultValue: '', description: 'Promote image tag')

        booleanParam(name: 'DEPLOY_WITH_LATEST_TAG', defaultValue: false, description: 'Set to true if you want the deployed images to also be with the `latest` tag')
    }

    // Keep commented if no env var is defined
    // environment {
        // Keep commented. It is for documentation only
        // Cannot define here as an env variable defined here is immutable ...

        // OPENSHIFT_API => Taken from Jenkins global env
        // OPENSHIFT_REGISTRY_ROUTE => Taken from Jenkins global env

        // OLD_IMAGE_REGISTRY_CREDENTIALS
        // OLD_IMAGE_USE_OPENSHIFT
        // OLD_IMAGE_REGISTRY
        // OLD_IMAGE_NAMESPACE
        // OLD_IMAGE_NAME_SUFFIX
        // OLD_IMAGE_TAG
        
        // NEW_IMAGE_REGISTRY_CREDENTIALS
        // NEW_IMAGE_USE_OPENSHIFT
        // NEW_IMAGE_REGISTRY
        // NEW_IMAGE_NAMESPACE
        // NEW_IMAGE_NAME_SUFFIX
        // NEW_IMAGE_TAG
    // }

    stages {
        stage('Initialization') {
            steps {
                script {
                    sh "docker rm -f \$(docker ps -a -q) || docker rmi -f \$(docker images -q) || date"

                    setupImageEnvVarsFromParams("BASE","OLD")
                    setupImageEnvVarsFromParams("PROMOTE","NEW")

                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }
                }
            }
        }
        stage('Pull "old" images'){
            steps{
                script {
                    if (env.OLD_IMAGE_USE_OPENSHIFT == "true") {
                        loginOpenshiftRegistry()
                        pullImages()
                    } else if (env.OLD_IMAGE_REGISTRY_CREDENTIALS != ''){
                        withDockerRegistry([ credentialsId: "${OLD_IMAGE_REGISTRY_CREDENTIALS}", url: "https://${OLD_IMAGE_REGISTRY}" ]){        
                            pullImages()
                        }
                    } else {
                        pullImages()
                    }
                }
            }
        }
        stage('Tag images'){
            steps{
                script {
                    tagImages()
                }
            }
        }
        stage('Pushing'){
            steps{
                script {
                    if (env.NEW_IMAGE_USE_OPENSHIFT == "true") {
                        loginOpenshiftRegistry()
                        pushImages()
                    } else if (env.NEW_IMAGE_REGISTRY_CREDENTIALS != ''){
                        withDockerRegistry([ credentialsId: "${NEW_IMAGE_REGISTRY_CREDENTIALS}", url: "https://${NEW_IMAGE_REGISTRY}" ]){
                            pushImages()
                        }
                    } else {
                        pushImages()
                    }
                }
            }
        }
        stage('Finishing'){
            steps{
                sh "docker rmi -f \$(docker images -q) || date"
            }
        }
    }
}

void pullImages(){
    for(String imageName : IMAGES){
        sh "docker pull ${getOldImageFullTag(imageName)}"
    }
}

void tagImages() {
    for(String imageName : IMAGES){
        sh "docker tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, env.NEW_IMAGE_TAG)}"
        if(isDeployLatestTag()){
            sh "docker tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, "latest")}"
        }
    }
}

void pushImages(){
    for(String imageName : IMAGES){
        sh "docker push ${getNewImageFullTag(imageName, env.NEW_IMAGE_TAG)}"
        if(isDeployLatestTag()){
            sh "docker push ${getNewImageFullTag(imageName, "latest")}"
        }
    }
}

String getOldImageFullTag(String imageName){
    return "${OLD_IMAGE_REGISTRY}/${OLD_IMAGE_NAMESPACE}/${buildImageNameWithSuffix(imageName, env.OLD_IMAGE_NAME_SUFFIX)}:${OLD_IMAGE_TAG}"
}

String getNewImageFullTag(String imageName, String tag){
    return "${NEW_IMAGE_REGISTRY}/${NEW_IMAGE_NAMESPACE}/${buildImageNameWithSuffix(imageName, env.NEW_IMAGE_NAME_SUFFIX)}:${tag}"
}

String buildImageNameWithSuffix(String imageName, String suffix) {
    String finalImageName = imageName
    if(suffix != null && suffix != '') {
        finalImageName += "-" + suffix
    }
    return finalImageName
}

boolean isDeployLatestTag(){
    return params.DEPLOY_WITH_LATEST_TAG
}

void loginOpenshiftRegistry() {
    // Use creds & route as `jenkins-slave` is not running directly on Openshift
    withCredentials([string(credentialsId: 'openshift-login-passwd', variable: 'OC_PASSWORD')]) {
        sh "set +x && oc login -u admin -p ${OC_PASSWORD} --server=${OPENSHIFT_API} --insecure-skip-tls-verify"
        sh "set +x && docker login -u admin -p \$(oc whoami -t) ${OPENSHIFT_REGISTRY_ROUTE}"
    }
}

/**
    Setup env variables for image registry/namesapce/tag, depending on parameters
*/
void setupImageEnvVarsFromParams(String prefixParam, String prefixEnv) {
    if(getParam(prefixParam, "IMAGE_REGISTRY") == '') {
        setEnv(prefixEnv, "IMAGE_REGISTRY", env.OPENSHIFT_REGISTRY_ROUTE) // Use route as `jenkins-slave` is not running directly on Openshift
        setEnv(prefixEnv, "IMAGE_NAMESPACE", "openshift")
        setEnv(prefixEnv, "IMAGE_USE_OPENSHIFT", "true")
    } else {
        setEnvFromParam("IMAGE_REGISTRY_CREDENTIALS", prefixEnv, prefixParam)
        setEnvFromParam("IMAGE_REGISTRY", prefixEnv, prefixParam)
        setEnvFromParam("IMAGE_NAMESPACE", prefixEnv, prefixParam)
        setEnv(prefixEnv, "IMAGE_USE_OPENSHIFT", "false")
    }
    if (getParam(prefixParam, "IMAGE_TAG") != '') {
        setEnvFromParam("IMAGE_TAG", prefixEnv, prefixParam)
    } else {
        setEnv(prefixEnv, "IMAGE_TAG", sh(script: "echo ${GIT_COMMIT} | cut -c1-7", returnStdout: true).trim())
    }
    if(getParam(prefixParam, "IMAGE_NAME_SUFFIX") != '') {
        setEnvFromParam("IMAGE_NAME_SUFFIX", prefixEnv, prefixParam)
    }
}

String getKey(String prefix, String envVarName) {
    if (prefix == '') {
        return envVarName
    }
    return "${prefix}_${envVarName}"
}

void setEnv(String keyPrefix, String keyId, String value){
    echo "setEnv ${getKey(keyPrefix, keyId)} = ${value}"
    env."${getKey(keyPrefix, keyId)}" = value
}

void setEnvFromParam(String keyId, String prefixEnv, String prefixParam){
    setEnv(prefixEnv, keyId, getParam(prefixParam, keyId))
}

String getParam(String keyPrefix, String keyId){
    return params."${getKey(keyPrefix, keyId)}"
}