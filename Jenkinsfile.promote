@Library('jenkins-pipeline-shared-libraries')_

IMAGES = ["kogito-cloud-operator"]

deployProperties = [:]

pipeline {
    agent {
        label 'kogito-operator-slave && !master'
    }

    options {
        buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '', numToKeepStr: '10')
    }

    parameters {
        string(name: 'DISPLAY_NAME', defaultValue: '', description: 'Setup a specific build display name')

        // Deploy job url to retrieve deployment.properties
        string(name: 'DEPLOY_BUILD_URL', defaultValue: '', description: 'URL to jenkins deploy build to retrieve the `deployment.properties` file. If base parameters are defined, they will override the `deployment.properties` information')
        // Git information which can override `deployment.properties`
        string(name: 'BUILD_BRANCH_NAME', defaultValue: '', description: 'Override `deployment.properties`. Which branch to build ? Set if you are not on a multibranch pipeline.')
        string(name: 'GIT_AUTHOR', defaultValue: '', description: 'Override `deployment.properties`. Which Git author repository ?')
        
        // Base information which can override `deployment.properties`
        booleanParam(name: 'BASE_IMAGE_USE_OPENSHIFT_REGISTRY', defaultValue: false, description: 'Override `deployment.properties`. Set to true if base image should be deployed in Openshift registry.In this case, BASE_IMAGE_REGISTRY_CREDENTIALS, BASE_IMAGE_REGISTRY and BASE_IMAGE_NAMESPACE parameters will be ignored')
        string(name: 'BASE_IMAGE_REGISTRY_CREDENTIALS', defaultValue: '', description: 'Override `deployment.properties`. Base Image registry credentials to use to deploy images. Will be ignored if no BASE_IMAGE_REGISTRY is given')
        string(name: 'BASE_IMAGE_REGISTRY', defaultValue: '', description: 'Override `deployment.properties`. Base image registry')
        string(name: 'BASE_IMAGE_NAMESPACE', defaultValue: '', description: 'Override `deployment.properties`. Base image namespace')
        string(name: 'BASE_IMAGE_NAME_SUFFIX', defaultValue: '', description: 'Override `deployment.properties`. Base image name suffix')
        string(name: 'BASE_IMAGE_TAG', defaultValue: '', description: 'Override `deployment.properties`. Base image tag')

        // Promote information
        booleanParam(name: 'PROMOTE_IMAGE_USE_OPENSHIFT_REGISTRY', defaultValue: false, description: 'Set to true if base image should be deployed in Openshift registry.In this case, PROMOTE_IMAGE_REGISTRY_CREDENTIALS, PROMOTE_IMAGE_REGISTRY and PROMOTE_IMAGE_NAMESPACE parameters will be ignored')
        string(name: 'PROMOTE_IMAGE_REGISTRY_CREDENTIALS', defaultValue: '', description: 'Promote Image registry credentials to use to deploy images. Will be ignored if no PROMOTE_IMAGE_REGISTRY is given')
        string(name: 'PROMOTE_IMAGE_REGISTRY', defaultValue: '', description: 'Promote image registry')
        string(name: 'PROMOTE_IMAGE_NAMESPACE', defaultValue: 'kiegroup', description: 'Promote image namespace')
        string(name: 'PROMOTE_IMAGE_NAME_SUFFIX', defaultValue: '', description: 'Promote image name suffix')
        string(name: 'PROMOTE_IMAGE_TAG', defaultValue: '', description: 'Promote image tag')
        booleanParam(name: 'DEPLOY_WITH_LATEST_TAG', defaultValue: false, description: 'Set to true if you want the deployed images to also be with the `latest` tag')

        // Release information which can override  `deployment.properties`
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Override `deployment.properties`. Is this build for a release?')
        string(name: 'PROJECT_VERSION', defaultValue: '', description: 'Override `deployment.properties`. Optional if not RELEASE. If RELEASE, cannot be empty.')
        string(name: 'GIT_TAG', defaultValue: '', description: 'Git tag to set, if different from v{PROJECT_VERSION}')
    }

    environment {
        OPENSHIFT_API = credentials("OPENSHIFT_API")
        OPENSHIFT_REGISTRY = credentials("OPENSHIFT_REGISTRY")
        OPENSHIFT_CREDS_KEY = "OPENSHIFT_CREDS"

        AUTHOR_CREDS_ID = "kie-ci"
        BOT_CREDENTIALS_ID = "bsig-gh-bot"
        
        // for github-release
        GITHUB_REPO = "kogito-cloud-operator"
        GITHUB_TOKEN_CREDS_ID = "kie-ci2-token"

        BOT_BRANCH_HASH = "${util.generateHash(10)}"
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    clean()

                    if (params.DISPLAY_NAME != "") {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        assert getProjectVersion() != ''
                    }

                    installGitHubReleaseCLI()
                }
            }
        }
        stage('Pull "old" images'){
            steps{
                script {
                    if (isOldImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getOldImageRegistryCredentials() != ''){
                        loginContainerRegistry(getOldImageRegistry(), getOldImageRegistryCredentials())
                    }
                    pullImages()
                }
            }
        }
        stage('Tag images'){
            steps{
                script {
                    tagImages()
                }
            }
        }
        stage('Pushing'){
            steps{
                script {
                    if (isNewImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getNewImageRegistryCredentials() != ''){
                        loginContainerRegistry(getNewImageRegistry(), getNewImageRegistryCredentials())
                    }
                    pushImages()
                }
            }
        }
        stage('Merge PR, tag and release CLI') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir("operator-main") {
                        checkoutRepo()

                        // Merge PR
                        String prLink = getDeployProperty('kogito-cloud-operator.pr.link')
                        if(prLink != ''){
                            githubscm.mergePR(prLink, env.AUTHOR_CREDS_ID)
                            githubscm.pushObject("origin", getBuildBranch(), env.AUTHOR_CREDS_ID)
                        }
                        
                        if(isRelease() && getGitTag() != ""){
                            releaseCLI()
                        }
                    }
                }
            }
        }

        // That part is commented as it messes with PRs on operatorhub which may require some changes
        // Commented for now
        // stage('Set next version') {
        //     when {
        //         expression { return isRelease() }
        //     }
        //     steps {
        //         script {
        //             String prLink = ""
        //             String nextVersion = getNextVersion()
        //             dir("operator-bot"){
        //                 checkoutRepo()
        //                 githubscm.forkRepo(env.BOT_CREDENTIALS_ID)
        //                 githubscm.createBranch(getSnapshotBranch())
                        
        //                 // Update version
        //                 sh "./hack/bump-version.sh ${nextVersion}"

        //                 def commitMsg = "Update snapshot version to ${nextVersion}"
        //                 def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
        //                 githubscm.commitChanges(commitMsg)
        //                 githubscm.pushObject("origin", getSnapshotBranch(), env.BOT_CREDENTIALS_ID)
        //                 prLink = githubscm.createPR(commitMsg, prBody, getBuildBranch(), env.BOT_CREDENTIALS_ID)
        //             }
        //             dir("operator-main") {
        //                 if (prLink != '') {
        //                     githubscm.mergePR(prLink, env.AUTHOR_CREDS_ID)
        //                     githubscm.pushObject("origin", getBuildBranch(), env.AUTHOR_CREDS_ID)
        //                 }
        //             }
        //         }
        //     }
        // }
    }
    post {
        always {
            script {
                clean()
            }
        }
    }
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository("kogito-cloud-operator", getGitAuthor(), getBuildBranch(), false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getBuildBranch()}"
}

void clean(){
    cleanImages()
    cleanWs()
}

void cleanImages(){
    sh "podman rm -f \$(podman ps -a -q) || date"
    sh "podman rmi -f \$(podman images -q) || date"
}

void pullImages(){
    for(String imageName : IMAGES){
        sh "podman pull ${getOldImageFullTag(imageName)}"
    }
}
void tagImages() {
    for(String imageName : IMAGES){
        sh "podman tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, getNewImageTag())}"
        if(isDeployLatestTag()){
            sh "podman tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, "latest")}"
        }
    }
}

void pushImages(){
    for(String imageName : IMAGES){
        sh "podman push ${getNewImageFullTag(imageName, getNewImageTag())}"
        if(isDeployLatestTag()){
            sh "podman push ${getNewImageFullTag(imageName, "latest")}"
        }
    }
}

String getOldImageFullTag(String imageName){
    return "${getOldImageRegistry()}/${getOldImageNamespace()}/${buildImageNameWithSuffix(imageName, getOldImageNameSuffix())}:${getOldImageTag()}"
}

String getNewImageFullTag(String imageName, String tag){
    return "${getNewImageRegistry()}/${getNewImageNamespace()}/${buildImageNameWithSuffix(imageName, getNewImageNameSuffix())}:${tag}"
}

String buildImageNameWithSuffix(String imageName, String suffix) {
    String finalImageName = imageName
    if(suffix != null && suffix != '') {
        finalImageName += "-" + suffix
    }
    return finalImageName
}

boolean isDeployLatestTag(){
    return params.DEPLOY_WITH_LATEST_TAG
}

void loginOpenshift(){
    withCredentials([usernamePassword(credentialsId: env.OPENSHIFT_CREDS_KEY, usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]){
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${env.OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry(){
    loginOpenshift()
    // username can be anything. See https://docs.openshift.com/container-platform/4.4/registry/accessing-the-registry.html#registry-accessing-directly_accessing-the-registry
    sh "set +x && podman login -u anything -p \$(oc whoami -t) --tls-verify=false ${env.OPENSHIFT_REGISTRY}"
}

void loginContainerRegistry(String registry, String credsId){
    withCredentials([usernamePassword(credentialsId: credsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "podman login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} --tls-verify=false ${registry}"
    }
}

void installGitHubReleaseCLI(){
    sh """
        go get github.com/github-release/github-release
    """
}

void releaseCLI() {
    sh "make build-cli release=true version=${getProjectVersion()}"
    def releaseName = "Kogito Operator and CLI Version ${getProjectVersion()}" 
    def description = "Kogito Operator is an OpenShift based operator for deployment of Kogito Runtimes from source. Additionally, to facilitate interactions with the operator we also offer a CLI (Command Line Interface) that can deploy Kogito applications for you." 
    def releasePath = "build/_output/release/" 
    def cliBaseName = "kogito-cli-${getProjectVersion()}" 
    def darwinFileName = "${cliBaseName}-darwin-amd64.tar.gz"
    def linuxFileName = "${cliBaseName}-linux-amd64.tar.gz"
    def windowsFileName = "${cliBaseName}-windows-amd64.zip"
    withCredentials([string(credentialsId: env.GITHUB_TOKEN_CREDS_ID, variable: 'GITHUB_TOKEN')]) {
        sh """
            export GITHUB_USER=${getGitAuthor()}
            github-release release --tag ${getGitTag()} --target '${getBuildBranch()}' --name '${releaseName}' --description '${description}' --pre-release
            github-release upload --tag ${getGitTag()} --name '${darwinFileName}' --file '${releasePath}${darwinFileName}'
            github-release upload --tag ${getGitTag()} --name '${linuxFileName}' --file '${releasePath}${linuxFileName}'
            github-release upload --tag ${getGitTag()} --name '${windowsFileName}' --file '${releasePath}${windowsFileName}'
        """
    }

    // Backup if github-release commands are failing for 0.14.0. else can be deleted if 0.14.0 went through
    // To be removed once github-release is tested and authorized
    // archiveArtifacts(artifacts: "${releasePath}${darwinFileName}")
    // archiveArtifacts(artifacts: "${releasePath}${linuxFileName}")
    // archiveArtifacts(artifacts: "${releasePath}${windowsFileName}")
    // githubscm.tagRepository(getGitTag() , env.BUILD_TAG)
    //                         githubscm.pushObject("origin", "--tags ${getGitTag()}", env.AUTHOR_CREDS_ID)
}


////////////////////////////////////////////////////////////////////////
// Old image information
////////////////////////////////////////////////////////////////////////

String getOldImagePrefix() {
    return "kogito-cloud-operator.image"
}

boolean isOldImageInOpenshiftRegistry(){
    return params.BASE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getOldImageRegistryCredentials(){
    return isOldImageInOpenshiftRegistry() ? "" : params.BASE_IMAGE_REGISTRY_CREDENTIALS
}

String getOldImageRegistry(){
    return isOldImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : getParamOrDeployProperty("BASE_IMAGE_REGISTRY" , "${getOldImagePrefix()}.registry")
}

String getOldImageNamespace(){
    return isOldImageInOpenshiftRegistry() ? "openshift" : getParamOrDeployProperty("BASE_IMAGE_NAMESPACE" , "${getOldImagePrefix()}.namespace")
}

String getOldImageNameSuffix(){
    return getParamOrDeployProperty("BASE_IMAGE_NAME_SUFFIX" , "${getOldImagePrefix()}.name-suffix")
}

String getOldImageTag(){
    return getParamOrDeployProperty("BASE_IMAGE_TAG" , "${getOldImagePrefix()}.tag")
}

////////////////////////////////////////////////////////////////////////
// New image information
////////////////////////////////////////////////////////////////////////

boolean isNewImageInOpenshiftRegistry(){
    return params.PROMOTE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getNewImageRegistryCredentials(){
    return isNewImageInOpenshiftRegistry() ? "" : params.PROMOTE_IMAGE_REGISTRY_CREDENTIALS
}

String getNewImageRegistry(){
    return isNewImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.PROMOTE_IMAGE_REGISTRY
}

String getNewImageNamespace(){
    return isNewImageInOpenshiftRegistry() ? "openshift" : params.PROMOTE_IMAGE_NAMESPACE
}

String getNewImageNameSuffix(){
    return params.PROMOTE_IMAGE_NAME_SUFFIX
}

String getNewImageTag(){
    return params.PROMOTE_IMAGE_TAG
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties(){
    String deployUrl = params.DEPLOY_BUILD_URL
    if(deployUrl != ""){
        if(!deployUrl.endsWith("/")){
            deployUrl += "/"
        }
        sh "wget ${deployUrl}artifact/deployment.properties"
        deployProperties = readProperties file:"deployment.properties"
        // echo all properties
        echo deployProperties.collect{ entry ->  "${entry.key}=${entry.value}" }.join("\n")
    }
}

boolean hasDeployProperty(String key){
    return deployProperties[key] != null
}

String getDeployProperty(String key){
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ""
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey){
    if (params[paramKey] != ""){
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return params.RELEASE || (getDeployProperty("release") == "true")
}

String getProjectVersion() {
    return getParamOrDeployProperty("PROJECT_VERSION", "project.version")
}

String getGitTag() {
    return params.GIT_TAG != "" ? params.GIT_TAG : "v${getProjectVersion()}"
}

String getBuildBranch() {
    return getParamOrDeployProperty("BUILD_BRANCH_NAME", "git.branch")
}

String getGitAuthor() {
    return getParamOrDeployProperty("GIT_AUTHOR", "git.author")
}

String getSnapshotBranch(){
    return "${getNextVersion()}-${env.BOT_BRANCH_HASH}"
}

String getCommitMessage(String version){
    return "Update operator version to ${version}"
}

String getNextVersion() {
    Integer[] versionSplit = util.parseVersion(getProjectVersion())
    return "${versionSplit[0]}.${versionSplit[1]}.0-rc1"
}