@Library('jenkins-pipeline-shared-libraries')_

IMAGES = ['kogito-operator']

helper = null

pipeline {
    agent {
        label 'kogito-operator-slave && !master'
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file

        BOT_BRANCH_HASH = "${util.generateHash(10)}"
        GITHUB_REPO = "${REPO_NAME}" // for github-release cli
    }

    stages {
        stage('Setup pipeline') {
            steps {
                script {
                    helper = load '.jenkins/scripts/helper.groovy'
                    helper.initPipeline()
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    helper.updateDisplayName()

                    properties.readFromUrl(helper.getDeployPropertiesFileUrl())

                    if (helper.isRelease()) {
                        // Verify version is set and if on right release branch
                        assert helper.getProjectVersion()

                        assert helper.getBuildBranch() == util.getReleaseBranchFromVersion(helper.getProjectVersion())
                    }

                    helper.installGitHubReleaseCLI()
                }
            }
        }
        stage('Pull "old" images') {
            steps {
                script {
                    helper.loginRegistry(baseImageParamsPrefix)

                    for (String imageName : IMAGES) {
                        container.pullImage(helper.getImageFullTag(imageName, baseImageParamsPrefix))
                    }
                }
            }
        }
        stage('Tag images') {
            steps {
                script {
                    for (String imageName : IMAGES) {
                        container.tagImage(helper.getImageFullTag(imageName, baseImageParamsPrefix), helper.getImageFullTag(imageName, promoteImageParamsPrefix))
                        if (helper.isDeployLatestTag()) {
                            container.tagImage(helper.getImageFullTag(imageName, baseImageParamsPrefix), helper.getImageFullTag(imageName, promoteImageParamsPrefix, 'latest'))
                        }
                    }
                }
            }
        }
        stage('Pushing') {
            steps {
                script {
                    helper.loginRegistry(promoteImageParamsPrefix)

                    for (String imageName : IMAGES) {
                        container.pushImage(helper.getImageFullTag(imageName, promoteImageParamsPrefix))
                        if (helper.isDeployLatestTag()) {
                            container.pushImage(helper.getImageFullTag(imageName, promoteImageParamsPrefix, 'latest'))
                        }

                        if (helper.getImageRegistry() == 'quay.io') {
                            helper.makeQuayImagePublic(helper.getFullImageName(imageName))
                        }
                    }
                }
            }
        }
        stage('Merge PR, tag and release CLI') {
            when {
                expression { return helper.isRelease() }
            }
            steps {
                script {
                    dir(helper.getRepoName()) {
                        helper.checkoutRepo()

                        // Merge PR
                        String prLink = properties.retrieve("${getRepoName()}.pr.link")
                        if (prLink) {
                            githubscm.mergePR(prLink, helper.getGitAuthorCredsID())
                            githubscm.pushObject('origin', helper.getBuildBranch(), helper.getGitAuthorCredsID())
                        }

                        if (helper.isRelease() && helper.getGitTag()) {
                            helper.releaseCLI()
                        }
                    }
                }
            }
        }
    }
    post {
        cleanup {
            script {
                util.cleanNode(containerEngine)
            }
        }
    }
}
