@Library('jenkins-pipeline-shared-libraries')_

IMAGES = ['kogito-cloud-operator']

deployProperties = [:]

pipeline {
    agent {
        label 'kogito-operator-slave && !master'
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file
        
        OPENSHIFT_API = credentials('OPENSHIFT_API')
        OPENSHIFT_REGISTRY = credentials('OPENSHIFT_REGISTRY')
        OPENSHIFT_CREDS_KEY = 'OPENSHIFT_CREDS'
        BOT_BRANCH_HASH = "${util.generateHash(10)}"
        GITHUB_REPO = "${REPO_NAME}" // for github-release cli
    }

    stages {
        stage('Initialization') {
            steps {
                script {
                    clean()

                    if (params.DISPLAY_NAME) {
                        currentBuild.displayName = params.DISPLAY_NAME
                    }

                    readDeployProperties()

                    if (isRelease()) {
                        // Verify version is set and if on right release branch
                        assert getProjectVersion()

                        assert getBuildBranch() == util.getReleaseBranchFromVersion(getProjectVersion())
                    }

                    installGitHubReleaseCLI()
                }
            }
        }
        stage('Pull "old" images'){
            steps{
                script {
                    if (isOldImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getOldImageRegistryCredentials() != ''){
                        loginContainerRegistry(getOldImageRegistry(), getOldImageRegistryCredentials())
                    }
                    pullImages()
                }
            }
        }
        stage('Tag images'){
            steps{
                script {
                    tagImages()
                }
            }
        }
        stage('Pushing'){
            steps{
                script {
                    if (isNewImageInOpenshiftRegistry()) {
                        loginOpenshiftRegistry()
                    } else if (getNewImageRegistryCredentials() != ''){
                        loginContainerRegistry(getNewImageRegistry(), getNewImageRegistryCredentials())
                    }
                    pushImages()
                }
            }
        }
        stage('Merge PR, tag and release CLI') {
            when {
                expression { return isRelease() }
            }
            steps{
                script {
                    dir(getRepoName()) {
                        checkoutRepo()

                        // Merge PR
                        String prLink = getDeployProperty("${getRepoName()}.pr.link")
                        if(prLink){
                            githubscm.mergePR(prLink, getGitAuthorCredsID())
                            githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())
                        }
                        
                        if(isRelease() && getGitTag()){
                            releaseCLI()
                        }
                    }
                }
            }
        }

        // That part is commented as it messes with PRs on operatorhub which may require some changes
        // Commented for now
        // stage('Set next version') {
        //     when {
        //         expression { return isRelease() }
        //     }
        //     steps {
        //         script {
        //             String prLink = ''
        //             String nextVersion = getNextVersion()
        //             dir('operator-bot'){
        //                 checkoutRepo()
        //                 githubscm.forkRepo(getBotAuthorCredsID())
        //                 githubscm.createBranch(getSnapshotBranch())
                        
        //                 // Update version
        //                 sh "make bump-version new_version=${nextVersion}"

        //                 def commitMsg = "[${getBuildBranch()}] Update snapshot version to ${nextVersion}"
        //                 def prBody = "Generated by build ${BUILD_TAG}: ${BUILD_URL}"
        //                 githubscm.commitChanges(commitMsg)
        //                 githubscm.pushObject('origin', getSnapshotBranch(), getBotAuthorCredsID())
        //                 prLink = githubscm.createPR(commitMsg, prBody, getBuildBranch(), getBotAuthorCredsID())
        //             }
        //             dir('operator-main') {
        //                 if (prLink != '') {
        //                     githubscm.mergePR(prLink, getGitAuthorCredsID())
        //                     githubscm.pushObject('origin', getBuildBranch(), getGitAuthorCredsID())
        //                 }
        //             }
        //         }
        //     }
        // }
    }
    post {
        always {
            script {
                clean()
            }
        }
    }
}

void checkoutRepo() {
    deleteDir()
    checkout(githubscm.resolveRepository(getRepoName(), getGitAuthor(), getBuildBranch(), false))
    // need to manually checkout branch since on a detached branch after checkout command
    sh "git checkout ${getBuildBranch()}"
}

void clean(){
    cleanImages()
    cleanWs()
}

void cleanImages(){
    sh 'docker rm -f \$(docker ps -a -q) || date'
    sh 'docker rmi -f \$(docker images -q) || date'
}

void pullImages(){
    for(String imageName : IMAGES){
        sh "docker pull ${getOldImageFullTag(imageName)}"
    }
}
void tagImages() {
    for(String imageName : IMAGES){
        sh "docker tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, getNewImageTag())}"
        if(isDeployLatestTag()){
            sh "docker tag ${getOldImageFullTag(imageName)} ${getNewImageFullTag(imageName, "latest")}"
        }
    }
}

void pushImages(){
    for(String imageName : IMAGES){
        sh "docker push ${getNewImageFullTag(imageName, getNewImageTag())}"
        if(isDeployLatestTag()){
            sh "docker push ${getNewImageFullTag(imageName, "latest")}"
        }
    }
}

String getOldImageFullTag(String imageName){
    return "${getOldImageRegistry()}/${getOldImageNamespace()}/${buildImageNameWithSuffix(imageName, getOldImageNameSuffix())}:${getOldImageTag()}"
}

String getNewImageFullTag(String imageName, String tag){
    return "${getNewImageRegistry()}/${getNewImageNamespace()}/${buildImageNameWithSuffix(imageName, getNewImageNameSuffix())}:${tag}"
}

String buildImageNameWithSuffix(String imageName, String suffix) {
    String finalImageName = imageName
    if(suffix != null && suffix != '') {
        finalImageName += '-' + suffix
    }
    return finalImageName
}

boolean isDeployLatestTag(){
    return params.DEPLOY_WITH_LATEST_TAG
}

void loginOpenshift(){
    withCredentials([usernamePassword(credentialsId: env.OPENSHIFT_CREDS_KEY, usernameVariable: 'OC_USER', passwordVariable: 'OC_PWD')]){
        sh "oc login --username=${OC_USER} --password=${OC_PWD} --server=${env.OPENSHIFT_API} --insecure-skip-tls-verify"
    }
}

void loginOpenshiftRegistry(){
    loginOpenshift()
    // username can be anything. See https://docs.openshift.com/container-platform/4.4/registry/accessing-the-registry.html#registry-accessing-directly_accessing-the-registry
    sh "set +x && docker login -u anything -p \$(oc whoami -t) ${env.OPENSHIFT_REGISTRY}"
}

void loginContainerRegistry(String registry, String credsId){
    withCredentials([usernamePassword(credentialsId: credsId, usernameVariable: 'REGISTRY_USER', passwordVariable: 'REGISTRY_PWD')]) {
        sh "docker login -u ${REGISTRY_USER} -p ${REGISTRY_PWD} ${registry}"
    }
}

void installGitHubReleaseCLI(){
    sh 'go get github.com/github-release/github-release'
}

void releaseCLI() {
    sh "make build-cli release=true version=${getProjectVersion()}"
    def releaseName = "Kogito Operator and CLI Version ${getProjectVersion()}" 
    def description = 'Kogito Operator is a Kubernetes based operator for Kogito Runtimes\' deployment from the source. Additionally, to facilitate interactions with the operator, we also offer a CLI (Command Line Interface) to deploy Kogito applications.' 
    def releasePath = 'build/_output/release/'
    def cliBaseName = "kogito-cli-${getProjectVersion()}" 
    def darwinFileName = "${cliBaseName}-darwin-amd64.tar.gz"
    def linuxFileName = "${cliBaseName}-linux-amd64.tar.gz"
    def windowsFileName = "${cliBaseName}-windows-amd64.zip"
    def yamlInstaller = 'kogito-operator.yaml'
    withCredentials([string(credentialsId: env.GITHUB_TOKEN_CREDS_ID, variable: 'GITHUB_TOKEN')]) {
        sh """
            export GITHUB_USER=${getGitAuthor()}
            github-release release --tag ${getGitTag()} --target \"${getBuildBranch()}\" --name \"${releaseName}\" --description \"${description}\" --pre-release
            github-release upload --tag ${getGitTag()} --name \"${darwinFileName}\" --file \"${releasePath}${darwinFileName}\"
            github-release upload --tag ${getGitTag()} --name \"${linuxFileName}\" --file \"${releasePath}${linuxFileName}\"
            github-release upload --tag ${getGitTag()} --name \"${windowsFileName}\" --file \"${releasePath}${windowsFileName}\"
            github-release upload --tag ${getGitTag()} --name \"${yamlInstaller}\" --file \"${yamlInstaller}\"
        """
    }
}


////////////////////////////////////////////////////////////////////////
// Old image information
////////////////////////////////////////////////////////////////////////

String getOldImagePrefix() {
    return "${getRepoName()}.image"
}

boolean isOldImageInOpenshiftRegistry(){
    return params.BASE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getOldImageRegistryCredentials(){
    return isOldImageInOpenshiftRegistry() ? '' : params.BASE_IMAGE_REGISTRY_CREDENTIALS
}

String getOldImageRegistry(){
    return isOldImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : getParamOrDeployProperty('BASE_IMAGE_REGISTRY' , "${getOldImagePrefix()}.registry")
}

String getOldImageNamespace(){
    return isOldImageInOpenshiftRegistry() ? 'openshift' : getParamOrDeployProperty('BASE_IMAGE_NAMESPACE' , "${getOldImagePrefix()}.namespace")
}

String getOldImageNameSuffix(){
    return getParamOrDeployProperty('BASE_IMAGE_NAME_SUFFIX' , "${getOldImagePrefix()}.name-suffix")
}

String getOldImageTag(){
    return getParamOrDeployProperty('BASE_IMAGE_TAG' , "${getOldImagePrefix()}.tag")
}

////////////////////////////////////////////////////////////////////////
// New image information
////////////////////////////////////////////////////////////////////////

boolean isNewImageInOpenshiftRegistry(){
    return params.PROMOTE_IMAGE_USE_OPENSHIFT_REGISTRY
}

String getNewImageRegistryCredentials(){
    return isNewImageInOpenshiftRegistry() ? '' : params.PROMOTE_IMAGE_REGISTRY_CREDENTIALS
}

String getNewImageRegistry(){
    return isNewImageInOpenshiftRegistry() ? env.OPENSHIFT_REGISTRY : params.PROMOTE_IMAGE_REGISTRY
}

String getNewImageNamespace(){
    return isNewImageInOpenshiftRegistry() ? 'openshift' : params.PROMOTE_IMAGE_NAMESPACE
}

String getNewImageNameSuffix(){
    return params.PROMOTE_IMAGE_NAME_SUFFIX
}

String getNewImageTag(){
    return params.PROMOTE_IMAGE_TAG
}

//////////////////////////////////////////////////////////////////////////////
// Deployment properties
//////////////////////////////////////////////////////////////////////////////

void readDeployProperties(){
    String deployUrl = params.DEPLOY_BUILD_URL
    if(deployUrl != ''){
        if(!deployUrl.endsWith('/')){
            deployUrl += '/'
        }
        sh "wget ${deployUrl}artifact/${env.PROPERTIES_FILE_NAME}"
        deployProperties = readProperties file: env.PROPERTIES_FILE_NAME
        // echo all properties
        echo deployProperties.collect{ entry ->  "${entry.key}=${entry.value}" }.join('\n')
    }
}

boolean hasDeployProperty(String key){
    return deployProperties[key] != null
}

String getDeployProperty(String key){
    if(hasDeployProperty(key)){
        return deployProperties[key]
    }
    return ''
}

String getParamOrDeployProperty(String paramKey, String deployPropertyKey){
    if (params[paramKey] != ''){
        return params[paramKey]
    }
    return getDeployProperty(deployPropertyKey)
}

//////////////////////////////////////////////////////////////////////////////
// Getter / Setter
//////////////////////////////////////////////////////////////////////////////

boolean isRelease() {
    return env.RELEASE.toBoolean()
}

String getRepoName(){
    return env.REPO_NAME
}

String getProjectVersion() {
    return getParamOrDeployProperty('PROJECT_VERSION', 'project.version')
}

String getGitTag() {
    return params.GIT_TAG != '' ? params.GIT_TAG : "v${getProjectVersion()}"
}

String getBuildBranch() {
    return params.BUILD_BRANCH_NAME
}

String getGitAuthor() {
    return env.GIT_AUTHOR
}

String getGitAuthorCredsID(){
    return env.AUTHOR_CREDS_ID
}

String getBotAuthorCredsID(){
    return env.BOT_CREDENTIALS_ID
}

String getSnapshotBranch(){
    return "${getNextVersion()}-${env.BOT_BRANCH_HASH}"
}

String getCommitMessage(String version){
    return "Update operator version to ${version}"
}

String getNextVersion() {
    Integer[] versionSplit = util.parseVersion(getProjectVersion())
    return "${versionSplit[0]}.${versionSplit[1]}.0-rc1"
}
