include Makefile

VERSION = $(shell go run version/getrhpamversion.go)
CHANNELS = 7.x
DEFAULT_CHANNEL = 7.x
BUNDLE_CHANNELS = --channels=$(CHANNELS)
BUNDLE_DEFAULT_CHANNEL = --default-channel=$(DEFAULT_CHANNEL)

IMAGE_TAG_BASE = registry.stage.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator

# BUNDLE_IMG defines the image:tag used for the bundle.
# You can use it as an arg. (E.g make bundle-build BUNDLE_IMG=<some-registry>/<project-name-bundle>:<tag>)
BUNDLE_IMG ?= $(IMAGE_TAG_BASE)-bundle:v$(VERSION)

# A comma-separated list of bundle images (e.g. make catalog-build BUNDLE_IMGS=example.com/operator-bundle:v0.1.0,example.com/operator-bundle:v0.2.0).
# These images MUST exist in a registry and be pull-able.
BUNDLE_IMGS ?= $(BUNDLE_IMG)

CEKIT_CMD := cekit -v --redhat ${cekit_option}

all: generate manifests container-build
	echo "calling IBM BAMOE all......................................"

##@ Development

manifests: controller-gen ## Generate WebhookConfiguration, ClusterRole and CustomResourceDefinition objects.
	echo "calling IBM BAMOE manifests......................................"
	./hack/kogito-module-api.sh --disable
	$(CONTROLLER_GEN) $(CRD_OPTIONS) paths="./apis/rhpam/..." output:crd:artifacts:config=config/crd/rhpam/bases
	$(CONTROLLER_GEN) rbac:roleName=manager-role paths="./controllers/rhpam" output:rbac:artifacts:config=config/rbac/rhpam
	$(CONTROLLER_GEN) webhook paths="./..."
	./hack/kogito-module-api.sh --enable

generate: controller-gen ## Generate code containing DeepCopy, DeepCopyInto, and DeepCopyObject method implementations.
	echo "calling IBM BAMOE generate......................................"
	./hack/kogito-module-api.sh --disable
	$(CONTROLLER_GEN) object:headerFile="hack/boilerplate.go.txt" paths=./...
	./hack/kogito-module-api.sh --enable

##@ Build


container-build: ## Build the container image
	echo "calling IBM BAMOE container-build......................................"
	cekit -v --descriptor rhpam-image.yaml build $(BUILDER)
	$(BUILDER) tag rhpam-7/rhpam-kogito-operator ${IMG}

container-push: ## Push the container image
	$(BUILDER) push ${IMG}

container-prod-build: ## prod build
	$(CEKIT_CMD) --descriptor=rhpam-image-prod.yaml build $(BUILDER)

.PHONY: bundle-prod-build
bundle-prod-build: bundle
	 $(CEKIT_CMD) --descriptor=rhpam-image-bundle.yaml build $(BUILDER)

##@ Deployment

bundle: manifests generate kustomize install-operator-sdk olm-manifests ## Generate bundle manifests and metadata, then validate generated files.
	echo "calling IBM BAMOE bundle......................................"
	sed -i "s/newTag: */newTag: ${VERSION}/g" ./config/manager/rhpam/kustomization.yaml
	./hack/kogito-module-api.sh --disable
	operator-sdk generate kustomize manifests --apis-dir=apis/rhpam --input-dir=./config/manifests/rhpam --output-dir=./config/manifests/rhpam --package=rhpam-kogito-operator -q
	cd config/manager/rhpam && $(KUSTOMIZE) edit set image controller=$(IMG)
	$(KUSTOMIZE) build config/manifests/rhpam | operator-sdk generate bundle --package=rhpam-kogito-operator --output-dir=bundle/rhpam -q --overwrite --version $(VERSION) $(BUNDLE_METADATA_OPTS)
	operator-sdk bundle validate ./bundle/rhpam
	./hack/kogito-module-api.sh --enable
	./hack/rhpam/rhpam-update-bundle.sh ${IMG}

generate-installer: generate manifests kustomize
	echo "calling IBM BAMOE generate-installer......................................"
	cd config/manager/rhpam && $(KUSTOMIZE) edit set image controller=$(IMG)
	sed -i "s/rhel8:.*/rhel8:${VERSION}/g" ./config/manager/rhpam/manager.yaml
	$(KUSTOMIZE) build config/default/rhpam > rhpam-operator.yaml


.PHONY: deploy-operator-on-ocp
image ?= $2
deploy-operator-on-ocp:
	./hack/rhpam/rhpam-deploy-operator-on-ocp.sh $(image)

olm-manifests:
	./hack/rhpam/rhpam-create-olm-manifests.sh

generate-profiling-installer:
	echo "calling IBM BAMOE generate-profiling-installer......................................"