@Library('jenkins-pipeline-shared-libraries')_

helper = null

pipeline {
    agent {
        label 'kogito-operator-slave && !master'
    }

    options {
        timeout(time: 120, unit: 'MINUTES')
    }

    // parameters {
    // For parameters, check into .jenkins/dsl/jobs.groovy file
    // }

    environment {
        // Static env is defined into .jenkins/dsl/jobs.groovy file

        KOGITO_CI_EMAIL_TO = credentials("${JENKINS_EMAIL_CREDS_ID}")

        BOT_BRANCH_HASH = "${util.generateHash(10)}"
        GITHUB_REPO = "${REPO_NAME}" // for github-release cli
    }

    stages {
        stage('Setup pipeline') {
            steps {
                script {
                    helper = load '.jenkins/scripts/helper.groovy'
                    helper.initPipeline()
                }
            }
        }
        stage('Initialize') {
            steps {
                script {
                    helper.updateDisplayName()

                    properties.readFromUrl(helper.getDeployPropertiesFileUrl())

                    if (helper.isRelease()) {
                        // Verify version is set and if on right release branch
                        assert helper.getProjectVersion()

                        assert helper.getBuildBranch() == util.getReleaseBranchFromVersion(helper.getProjectVersion())
                    }
                }
            }
        }
        stage('Pull "old" images') {
            steps {
                script {
                    helper.loginRegistry(baseImageParamsPrefix)

                    for (String imageName : getImages()) {
                        container.pullImage(helper.getImageFullTag(imageName, baseImageParamsPrefix))
                    }
                }
            }
        }
        stage('Tag images') {
            steps {
                script {
                    for (String imageName : getImages()) {
                        container.tagImage(helper.getImageFullTag(imageName, baseImageParamsPrefix), helper.getImageFullTag(imageName, promoteImageParamsPrefix))
                        if (helper.isDeployLatestTag()) {
                            container.tagImage(helper.getImageFullTag(imageName, baseImageParamsPrefix), helper.getImageFullTag(imageName, promoteImageParamsPrefix, 'latest'))
                        }
                        String reducedTag = getPromoteReducedTag()
                        if (reducedTag) {
                            container.tagImage(helper.getImageFullTag(imageName, baseImageParamsPrefix), helper.getImageFullTag(imageName, promoteImageParamsPrefix, reducedTag))
                        }
                    }
                }
            }
        }
        stage('Pushing') {
            steps {
                script {
                    helper.loginRegistry(promoteImageParamsPrefix)

                    for (String imageName : getImages()) {
                        container.pushImage(helper.getImageFullTag(imageName, promoteImageParamsPrefix))
                        if (helper.isDeployLatestTag()) {
                            container.pushImage(helper.getImageFullTag(imageName, promoteImageParamsPrefix, 'latest'))
                        }
                        String reducedTag = getPromoteReducedTag()
                        if (reducedTag) {
                            container.pushImage(helper.getImageFullTag(imageName, promoteImageParamsPrefix, reducedTag))
                        }

                        if (helper.getImageRegistry(promoteImageParamsPrefix) == 'quay.io') {
                            helper.makeQuayImagePublic(helper.getFullImageName(imageName, promoteImageParamsPrefix), promoteImageParamsPrefix)
                        }
                    }
                }
            }
        }
    }
    post {
        unsuccessful {
            sendNotification()
        }
        cleanup {
            script {
                util.cleanNode(containerEngine)
            }
        }
    }
}

void sendNotification() {
    if (params.SEND_NOTIFICATION) {
        emailext body: "**Promote job** #${BUILD_NUMBER} was: ${currentBuild.currentResult}\nPlease look here: ${BUILD_URL}",
             subject: "[${helper.getBuildBranch()}] Kogito Examples Images",
             to: env.KOGITO_CI_EMAIL_TO
    } else {
        echo 'No notification sent per configuration'
    }
}

List getImages() {
    return helper.getImageNames(baseImageParamsPrefix)
}

String getPromoteReducedTag() {
    String tag = helper.getImageTag(promoteImageParamsPrefix)
    try {
        String[] versionSplit = tag.split('\\.')
        return "${versionSplit[0]}.${versionSplit[1]}"
    } catch (error) {
        echo "${tag} cannot be reduced to the format X.Y"
    }
    return ''
}
